<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DUSt3R</title>
    <url>/Dust3r/</url>
    <content><![CDATA[<h2 id="DUST3r"><a href="#DUST3r" class="headerlink" title="DUST3r"></a>DUST3r</h2><p>github连接：<a href="https://github.com/naver/dust3r">DUSt3R</a><br><img src="/Dust3r/2.png" alt="alt text"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>DUSt3R是一种旨在简化几何3D视觉任务的新框架。作者着重于使3D重建过程更加易于使用和高效。该框架利用深度学习和几何处理的最新进展，提高了准确性并降低了计算复杂性。 </p>
<p>DUSt3R以一组不受约束的图像为输入，输出点图(pointmaps)，从这些点图可以直接推导出各种几何量。</p>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p><img src="/Dust3r/1.png" alt="alt text"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><p><strong>输入：</strong> 两张不受约束的图像</p>
<p>通过共享权重的ViT网络生成两个token，返回在解码器中进行联合推理，在解码器传递过程中，两个分支之间不断共享信息。这对于输出正确对齐的点图至关重要。也就是说，每个解码器块关注来自另一个分支的token：<br>$$G_i^1 &#x3D; DecoderBlock_i^1 (G^1_{i-1}, G^2_{i-1})$$<br>$$G_i^2 &#x3D; DecoderBlock_i^2 (G^2_{i-1}, G^1_{i-1})$$<br><strong>输出：</strong> 经过Head处理后输出点云图和置信图，点云图的坐标系为第一张图片的坐标系。</p>
<h3 id="训练目标"><a href="#训练目标" class="headerlink" title="训练目标"></a>训练目标</h3><ol>
<li><p>3D回归损失函数<br>$$\mathcal{l}_{regr}(v, i)&#x3D;||\frac{1}{z}X_i^{v,1}-\frac{1}{\overline{z}}\overline{X}_i^{v,1}||$$</p>
<p>$X^{n,m}$是指相机$n$得到的点云图$X^n$在相机$m$的坐标系下观测到的。上述公式用于计算像素$i\in D^v$在视图$v$中的3D回归损失。<br>$$\overline{z}&#x3D;norm(X^1,X^2) &#x3D; \frac{1}{|D^1|+|D^2|}\sum_{v\in{1,2}}\sum_{i\in D^v}||X_i^v||$$<br>代表平均距离，分别通过$z$和$\overline{z}$对预测和真实点图进行归一化，它们只是表示所有有效的点到原点的平均距离。</p>
</li>
<li><p>置信度感知损失<br>存在定义不明确的 3D 点，例如在天空中或半透明物体上。更一般地，图像中的某些部分通常比其他部分更难预测。因此，共同学习预测每个像素的分数，该分数表示网络对该特定像素的置信度。最终的训练目标是所有有效像素的置信度加权回归损失：<br>$$\mathcal{L}<em>{conf}&#x3D;\sum</em>{v\in{1,2}}\sum_{i\in D^v}\mathcal{C}<em>i^{v,1}\mathcal{l}</em>{regr}(v, i)-\alpha\log{C_i^{v,1}}$$</p>
</li>
</ol>
<h3 id="下游应用"><a href="#下游应用" class="headerlink" title="下游应用"></a>下游应用</h3><ol>
<li>点匹配<br>通过最近邻算法，建立两个图像像素之间的对应关系。</li>
<li>恢复相机内参<br>假设主点大致位于中心，像素为正方形，因此只需估计焦点$f$。</li>
<li>相对姿态估计<br>执行 2D 匹配并恢复内参矩阵，然后估计对极矩阵并恢复相对姿态；或者使用 Procrustes 对齐比较点图获得相对姿态<br>参考我的另一篇文章<a href="https://blog.fengyunji.site/%E5%AF%B9%E6%9E%81%E5%87%A0%E4%BD%95/">对极几何</a></li>
<li>绝对姿态估计</li>
</ol>
<h3 id="全局对齐"><a href="#全局对齐" class="headerlink" title="全局对齐"></a>全局对齐</h3><ol>
<li>配对图<br>俩俩配对，构建一个连通图，根据两对的平均置信度测量它们的重叠，然后过滤掉低置信度的对。</li>
<li>全局优化</li>
<li>恢复相机参数</li>
</ol>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>GaussianSplating</tag>
        <tag>DUSt3R</tag>
      </tags>
  </entry>
  <entry>
    <title>Ego-Planner接MPC（二）</title>
    <url>/Ego-Planner%E6%8E%A5MPC-2/</url>
    <content><![CDATA[<h2 id="Ego-Planner中一些注意事项"><a href="#Ego-Planner中一些注意事项" class="headerlink" title="Ego Planner中一些注意事项"></a>Ego Planner中一些注意事项</h2><ol>
<li>规划程序设定了规划的最高高度，变量名为<code>mp_.virtual_ceil_height_</code><br> 在<code>advanced_param.xml</code>中进行配置，参数名为<br> <code>&lt;param name=&quot;grid_map/virtual_ceil_height&quot;   value=&quot;2.5&quot;/&gt;</code><br> 实现方式为：直接加一个天花板障碍物 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add virtual ceiling to limit flight height</span></span><br><span class="line"><span class="keyword">if</span> (mp_.virtual_ceil_height_ &gt; <span class="number">-0.5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ceil_id = <span class="built_in">floor</span>((mp_.virtual_ceil_height_ - mp_.<span class="built_in">map_origin_</span>(<span class="number">2</span>)) * mp_.resolution_inv_);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = md_.<span class="built_in">local_bound_min_</span>(<span class="number">0</span>); x &lt;= md_.<span class="built_in">local_bound_max_</span>(<span class="number">0</span>); ++x)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> y = md_.<span class="built_in">local_bound_min_</span>(<span class="number">1</span>); y &lt;= md_.<span class="built_in">local_bound_max_</span>(<span class="number">1</span>); ++y)</span><br><span class="line">    &#123;</span><br><span class="line">        md_.occupancy_buffer_inflate_[<span class="built_in">toAddress</span>(x, y, ceil_id)] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在通过WayPoint设定规划目标时，z轴不能小于0.1: <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">EGOReplanFSM::waypointCallback</span><span class="params">(<span class="type">const</span> nav_msgs::PathConstPtr &amp;msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg-&gt;poses[<span class="number">0</span>].pose.position.z &lt; <span class="number">-0.1</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Triggered!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    trigger_ = <span class="literal">true</span>;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Ego Planner状态机的切换： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">            INIT</span><br><span class="line">           /    \</span><br><span class="line">        设点    指点</span><br><span class="line">        /         \</span><br><span class="line">GEN_NEW_TRAJ &lt;-- WAIT_TARGET       EMERGENCY_STOP</span><br><span class="line">      |&lt;-------------</span><br><span class="line">      |             |</span><br><span class="line">  EXEC_TRAJ --&gt; REPLAN_TRAJ</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>无人机</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Planner</tag>
        <tag>MPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Ego-Planner接MPC（一）</title>
    <url>/Ego-Planner%E6%8E%A5MPC/</url>
    <content><![CDATA[<h2 id="Ego-Planner"><a href="#Ego-Planner" class="headerlink" title="Ego Planner"></a>Ego Planner</h2><p>Ego Planner是一种常用的规划算法，由浙大Fast Lab开发，开源地址为：<a href="https://github.com/ZJU-FAST-Lab/ego-planner">GitHub</a><br>在本任务中，需要将Ego Planner的规划路径发送给MPC，由MPC进行控制，相关控制流可以参考浙大开源的Fast-Drone-250项目，开源地址为：<a href="https://github.com/ZJU-FAST-Lab/Fast-Drone-250">GitHub</a>  </p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>有避障、规划、控制程序</li>
<li>使用人数多，稳定</li>
<li>有啥bug网上都能查</li>
<li>占用小，可移植性强</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>不是自己写的，有啥坑都得踩一遍，没有自主可控性</li>
</ol>
<h3 id="修改路径发布"><a href="#修改路径发布" class="headerlink" title="修改路径发布"></a>修改路径发布</h3><ul>
<li>Ego Planner的路径是通过B样条进行拟合得到的，B样条通过话题<code>planning/bspline</code>进行发布，具体函数在<code>traj_server.cpp</code>的<code>bsplineCallback</code>函数中</li>
<li>B样条话题只在重规划之后才发布一次，因此不能在回调函数中直接发给MPC，<code>traj_server.cpp</code>中有一个定时执行的函数：  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ros::Timer cmd_timer = node.<span class="built_in">createTimer</span>(ros::<span class="built_in">Duration</span>(<span class="number">0.01</span>), cmdCallback);</span><br></pre></td></tr></table></figure></li>
<li><code>cmdCallback</code>函数的发布频率为100Hz，在<code>Fast-Drone-250</code>中其原本的目的是将控制命令发送给<code>px4ctrl</code>功能包进行控制执行，本项目中使用MPC进行控制，因此不需要这个控制命令，那么轨迹的发布可以放在这个函数中进行，具体代码如下：  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// traj_msg_存的是要发给MPC的路径点</span></span><br><span class="line">ius_msgs::Trajectory traj_msg_;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bsplineCallback</span><span class="params">(ego_planner::BsplineConstPtr msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// parse pos traj</span></span><br><span class="line"></span><br><span class="line"><span class="function">Eigen::MatrixXd <span class="title">pos_pts</span><span class="params">(<span class="number">3</span>, msg-&gt;pos_pts.size())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Eigen::VectorXd <span class="title">knots</span><span class="params">(msg-&gt;knots.size())</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; msg-&gt;knots.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">knots</span>(i) = msg-&gt;knots[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; msg-&gt;pos_pts.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">pos_pts</span>(<span class="number">0</span>, i) = msg-&gt;pos_pts[i].x;</span><br><span class="line">    <span class="built_in">pos_pts</span>(<span class="number">1</span>, i) = msg-&gt;pos_pts[i].y;</span><br><span class="line">    <span class="built_in">pos_pts</span>(<span class="number">2</span>, i) = msg-&gt;pos_pts[i].z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">traj_msg_.pos.<span class="built_in">clear</span>();</span><br><span class="line">traj_msg_.yaw.<span class="built_in">clear</span>();</span><br><span class="line">traj_msg_.time.<span class="built_in">clear</span>();</span><br><span class="line">traj_msg_.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">traj_msg_.header.frame_id = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i&lt; msg-&gt;pos_pts.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    traj_msg_.pos.<span class="built_in">push_back</span>(msg-&gt;pos_pts[i]);</span><br><span class="line">    traj_msg_.yaw.<span class="built_in">push_back</span>(<span class="number">0.0</span>);</span><br><span class="line">    traj_msg_.time.<span class="built_in">push_back</span>(msg-&gt;knots[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UniformBspline <span class="title">pos_traj</span><span class="params">(pos_pts, msg-&gt;order, <span class="number">0.1</span>)</span></span>;</span><br><span class="line">pos_traj.<span class="built_in">setKnot</span>(knots);</span><br><span class="line"></span><br><span class="line">start_time_ = msg-&gt;start_time;</span><br><span class="line">traj_id_ = msg-&gt;traj_id;</span><br><span class="line"></span><br><span class="line">traj_.<span class="built_in">clear</span>();</span><br><span class="line">traj_.<span class="built_in">push_back</span>(pos_traj);</span><br><span class="line">traj_.<span class="built_in">push_back</span>(traj_[<span class="number">0</span>].<span class="built_in">getDerivative</span>());</span><br><span class="line">traj_.<span class="built_in">push_back</span>(traj_[<span class="number">1</span>].<span class="built_in">getDerivative</span>());</span><br><span class="line"></span><br><span class="line">traj_duration_ = traj_[<span class="number">0</span>].<span class="built_in">getTimeSum</span>();</span><br><span class="line"></span><br><span class="line">receive_traj_ = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cmdCallback</span><span class="params">(<span class="type">const</span> ros::TimerEvent &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* no publishing before receive traj_ */</span></span><br><span class="line"><span class="keyword">if</span> (!receive_traj_)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">traj_msg_.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">traj_pub.<span class="built_in">publish</span>(traj_msg_);</span><br><span class="line"></span><br><span class="line">ros::Time time_now = ros::Time::<span class="built_in">now</span>();</span><br><span class="line"><span class="type">double</span> t_cur = (time_now - start_time_).<span class="built_in">toSec</span>();</span><br><span class="line">........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>自此，路径从Ego Planner中发送给MPC程序</li>
</ul>
]]></content>
      <categories>
        <category>无人机</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Planner</tag>
        <tag>MPC</tag>
      </tags>
  </entry>
  <entry>
    <title>FUEL探索</title>
    <url>/FUEL%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<h2 id="FIS结构"><a href="#FIS结构" class="headerlink" title="FIS结构"></a>FIS结构</h2><p>FUEL采用$FI_i$结构描述环境边界，包含的信息为：</p>
<ul>
<li>边界聚类 $F_i$</li>
<li>所有数据这个类的网格 $C_i$</li>
<li>$C_i$的中心位置 $p_{avg,i}$</li>
<li>边界框(AABB) $B_i$</li>
</ul>
<h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><ol>
<li>建立AABB框</li>
<li>获取传感器信息，在新感知区域建立AABB框</li>
<li>对比原有AABB框和新AABB框，删除不含边界的AABB框</li>
<li>利用剩余的AABB框(FIS)更新边界</li>
<li>判断AABB框对应边界大小，过大则主元分解<br><img src="/FUEL%E6%8E%A2%E7%B4%A2/fuel1.png" alt="主要步驟"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
</ol>
<h2 id="视点建立"><a href="#视点建立" class="headerlink" title="视点建立"></a>视点建立</h2><p>对于每个FIS，建立视点，使用一个极坐标系，中心点在$C_i$的中心位置，在极坐标系内均匀采样，得到视点集合$VP_i$。<br><img src="/FUEL%E6%8E%A2%E7%B4%A2/fuel2.png" alt="视点选择"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>对每个$VP$，根据使覆盖范围最大来确定yaw角，覆盖范围计算使根据传感器模型，与已占用的栅格不冲突的边界栅格的数量。<br>并计算两个$VP$的最短时间：<br>$$t_{lb}(x_{k_1,j_1},x_{k_2,j_1})&#x3D;\max{\frac{length(P(p_{k_1,j_1},p_{k_2,j_1}))}{v_{max}}，\frac{min(|\xi_{k_1,j_1}-\xi_{k2,j1}|,2\pi-|\xi_{k_1,j_1}-\xi_{k2,j1}|)}{\dot{\xi}_{max}}}$$<br>其中$P$是用A*算法规划的路径，前一项是位移速度限制，后一项是角速度限制。</p>
<h2 id="全局规划"><a href="#全局规划" class="headerlink" title="全局规划"></a>全局规划</h2><p>TSP问题，寻找开环回路，假设有$N_{cls}$个类，$M_{tsp}$代表${N_{cls}+1}$维矩阵，主要部分为${N_{cls}\times N_{cls}}$块，则TSP问题为：<br>$$M_{tsp}(k_1,k_2)&#x3D;M_{tsp}(k_2,k_1)&#x3D;t_{lb}(x_{k_1,1},x_{k_2,1}),k_1,k_2\in {1,2,…,N_{cls}}$$<br>$$M_{tsp}(0,k)&#x3D;t_{lb}(x_{0,1},x_{k,1})+\omega_c\cdot c_c(x_{k,1}),k\in {1,2,…,N_{cls}}$$<br>其中$c_c(x_{k,1})$是运动一致性成本，用来惩罚运动方向改变。<br>$$c_c(x_{k,1})&#x3D;cos^{-1}\frac{(p_{k,j}-p_0)\cdot v_0}{||p_{k,j}-p_0||\space ||v_0||}$$<br>最后，通过$M_{tsp}(k,0)&#x3D;0,k\in {1,2,…,N_{cls}}$，将开环TSP问题转化为闭环问题求解，且不会引入额外的cost。</p>
<h2 id="局部规划"><a href="#局部规划" class="headerlink" title="局部规划"></a>局部规划</h2><p>全局规划只是找到了访问所有聚类的最佳顺序，但是只涉及每个类都单个视点，不一定是所有视点中的最佳组合。<br>因此，在局部路径规划中，以当前位置做一个半径圆，在该圆内同时再取一些其他的视点，将这些在半径中的视点进行全连接，然后通过dijkstra算法寻找最优路径$E&#x3D;{x_{1,j_1},x_{2,j_2},…,x_{N_{rf},j_{N_{rf}}}}$。<br>$$c_{rf}(E)&#x3D;t_{lb}(x_0,x_{1,j_1})+\omega_c\cdot c_c(x_{1,j_1})+t_{lb}(x_{N_{rf}+1,1})+\sum_{k&#x3D;1}^{N_{rf}-1}t_{lb}(x_{k,j_k},x_{k+1,j_{k+1}})$$<br><img src="/FUEL%E6%8E%A2%E7%B4%A2/fuel3.png" alt="路径规划"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>Exploration</category>
      </categories>
      <tags>
        <tag>FUEL</tag>
      </tags>
  </entry>
  <entry>
    <title>InstantSplat</title>
    <url>/InstantSplat/</url>
    <content><![CDATA[<h1 id="InstantSplat"><a href="#InstantSplat" class="headerlink" title="InstantSplat"></a>InstantSplat</h1><p>github连接：<a href="https://github.com/NVlabs/InstantSplat">InstantSplat</a><br><img src="/InstantSplat/1.png" alt="alt text"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>InstantSplat，这是一种高效的新视图合成（NVS）方法，专门设计用于处理大规模场景、稀疏视图和无姿态条件。InstantSplat通过结合3D高斯溅射（3D-GS）和端到端密集立体模型（DUSt3R）的优势，能够在不到一分钟内从稀疏和无姿态的图像中重建出高质量的3D场景，并生成准确的新视图。</p>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p><img src="/InstantSplat/2.png" alt="alt text"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ol>
<li><p>使用DUSt3R生成稠密点云</p>
</li>
<li><p>基于生成的稠密点云使用3D-GS进行优化，具体是进行1000次迭代，但不进行稠密化、分裂、重置透明度等操作</p>
</li>
<li><p>联合优化姿势和属性<br>根据公式</p>
<p>$$S*, T*&#x3D;{\arg \min}<em>{S, T} \sum</em>{v\in N}\sum^{HW}_{i&#x3D;1}||\widetilde{C}_v^i(S, T)-C_v^i(S, T)||+\lambda \cdot ||T-T0||$$</p>
<p>其中$S$代表3D高斯点集合，$T$代表相机外参，$C$代表渲染函数，$T0$代表初始值，上述公式保证了在优化位姿的时候不会过于远离初始值。</p>
</li>
<li><p>在测试视图上对齐相机姿态<br>在实际应用中，测试视图的相机姿态可能是未知的或带有噪声的，这会影响最终渲染图像的准确性和一致性。首先，在训练视图上训练了一个3DGS模型，并保持3DGS模型在测试阶段是冻结的，即不对其参数进行进一步的调整。然后，他们专注于单独优化测试视图的相机姿态，目标是最小化由这个模型渲染的图像与实际测试视图之间的光度差异。这个过程涉及到调整相机姿态，直到渲染出的图像与真实图像在视觉上尽可能相似。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>GaussianSplating</tag>
        <tag>DUSt3R</tag>
        <tag>InstantSplat</tag>
      </tags>
  </entry>
  <entry>
    <title>Gaussian Splating</title>
    <url>/GaussianSplating/</url>
    <content><![CDATA[<h1 id="Gaussian-Splatting"><a href="#Gaussian-Splatting" class="headerlink" title="Gaussian Splatting"></a>Gaussian Splatting</h1><p>开山论文：<strong>3D Gaussian Splatting for Real-Time Radiance Field Rendering</strong>  </p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul>
<li>3D GS的输入是SFM(Structure-from-Motion)和图像，SFM点可以是随机初始化的; NeRF的输入是相机位姿和图像和SFM和初始点云</li>
</ul>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>3D GS的核心是一堆高斯点云，需要对点云的一些参数进行拟合</p>
<h3 id="点云颜色-C"><a href="#点云颜色-C" class="headerlink" title="点云颜色$C$"></a>点云颜色$C$</h3><ul>
<li>NeRF和$\alpha$混合的体积渲染：<br>  颜色$C$是通过沿着射线的体积渲染得到的<br>  $C&#x3D;\sum\limits_{i&#x3D;1}^{N}{T_i(1-\exp(-\sigma_i\delta_i))c_i}$<br>  $T_i&#x3D;\exp(-\sum\limits_{j&#x3D;1}^{i-1}\sigma_i\delta_i)$<br>  沿着间隔为$\delta$，采集射线上密度$\sigma$，透射率$T$和颜色$c$的样本，可以重写为:<br>  $C&#x3D;\sum\limits_{i&#x3D;1}^{N}T_i\alpha_ic_i$<br>  $\alpha_i&#x3D;(1-\exp(-\sigma_i\delta_i))$ 和 $T_i&#x3D;\prod\limits_{j&#x3D;1}^{i-1}(1-\alpha_i)$</li>
<li>基于神经点的学习方法:<br>  $C&#x3D;\sum\limits_{i\in\mathcal{N}}c_i\alpha_i\prod\limits_{j&#x3D;1}^{i-1}(1-\alpha_j)$<br>  其中$\mathcal{N}$是N个与像素重叠的有序点，用以计算一个像素的颜色$C$，$c_i$是每个点的颜色，$\alpha_i$是通过计算协方差$\Sigma$的二维高斯分布乘以学习的每点不透明度给出的</li>
<li>区别：图像生成模型相同，但是渲染算法不同<ul>
<li>NeRF是一种隐式表示，是连续表示，随机抽样代价较大</li>
<li>点是一种结构化、离散的表示方式<br>3D高斯是可微的，能够很容易投影到2D平米，允许快速$\alpha$混合渲染。</li>
</ul>
</li>
</ul>
<h3 id="3D-Gaussian"><a href="#3D-Gaussian" class="headerlink" title="3D Gaussian"></a>3D Gaussian</h3><ul>
<li>高斯函数(一维)：<br>$N_{\mu,\sigma}(x)&#x3D;\frac{1}{\sqrt{2\pi}\sigma}\exp(-\frac{(x-\mu)^2}{2\sigma^2})$</li>
<li>三维高斯函数：<br>$G_s(x)&#x3D;(\frac{1}{\sqrt{2\pi}^3}\det{(\sum)})e^{-\frac{1}{2}(x-\mu)^T\sum^{-1}(x-\mu)}$<br>其中，$x&#x3D;[a,b,c]^T$，$\mu$是椭球中心，协方差矩阵表示椭球在三轴上的伸缩和旋转，  <div>$$\sum=\begin{bmatrix}\sigma_a^2&Cov(a,b)&Cov(a,c)\\Cov(b,a)&\sigma_b^2&Cov(b,c)\\Cov(c,a)&Cov(c,b)&\sigma_c^2\end{bmatrix}$$  </div>
协方差的特征向量就是椭球对称轴。</li>
</ul>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ul>
<li>一组静态图片</li>
<li>由SFM生成的校准图像和稀疏点云</li>
</ul>
<h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><p><img src="/img/3d_GS_flow.png" alt="Word Flow"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>由输入，创建一组三维高斯分布，由位置($mean$)、协方差矩阵和不透明度($\alpha$)定义。</li>
<li>辐射场的各个方向的颜色由<strong>球谐波(Sphere Harmonics)</strong> 表示。</li>
<li>高斯函数：<br>$G(x)&#x3D;e^{\frac{1}{2}(x)^T\sum^{-1}(x)}$<br>在$\alpha$混合中，这个高斯将与$\alpha$相乘，其中心点均值为$\mu$</li>
<li>3D向2D投影渲染，，给定观察变换$W$，相机坐标中的协方差矩阵为：<br>$\sum^{‘}&#x3D;JW\sum W^TJ^T$<br>$J$是射影变换的仿射近似的雅可比矩阵。可以直接优化$\sum$来获得三维高斯分布，但协方差矩阵只有在正半定的时候才具有物理意义。使用梯度下降不能轻易约束地产生有效的矩阵，并且更新步骤和梯度可以很容易地创建无效的矩阵。</li>
<li>因此，使用更加直观的方法来进行处理。三维高斯分布的协方差$\sum$类似于描述椭球体的构型，给定一个比例矩阵$S$和旋转矩阵$R$，可以得到相应的$\sum$：<br>$\sum&#x3D;RSS^TR^T$<br>为了独立优化，分别存储用于缩放的三维向量$s$和表示旋转的四元素$q$。</li>
<li>交叉优化的参数包括：  <ol>
<li>点的三维位置$p$</li>
<li>协方差矩阵$\sum$</li>
<li>不透明度$\alpha$</li>
<li>球谐函数</li>
</ol>
</li>
<li>自适应控制：通过复制高斯点解决重建不足问题，通过分裂高斯点解决重建过度问题<br><img src="/GaussianSplating/gs_adaptive_control.png" alt="Adaptive Control"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
</ul>
<h3 id="3D-Gaussian-Splatting-in-SLAM"><a href="#3D-Gaussian-Splatting-in-SLAM" class="headerlink" title="3D Gaussian Splatting in SLAM"></a>3D Gaussian Splatting in SLAM</h3><ul>
<li>参考CVPR的<a href="https://github.com/muskie82/MonoGS">GS-SLAM</a></li>
<li>参考SplaTAM</li>
</ul>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>GaussianSplating</tag>
      </tags>
  </entry>
  <entry>
    <title>KLT光流跟踪算法</title>
    <url>/KLT%E5%85%89%E6%B5%81%E8%B7%9F%E8%B8%AA%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>光流的概念是Gibson在1950年首先提出来的。<br>它是空间运动物体在观察成像平面上的像素运动的瞬时速度，是利用图像序列中像素在时间域上的变化以及相邻帧之间的相关性来找到上一帧跟当前帧之间存在的对应关系，从而计算出相邻帧之间物体的运动信息的一种方法。一般而言，光流是由于场景中前景目标本身的移动、相机的运动，或者两者的共同运动所产生的。</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ol>
<li>相邻帧间亮度恒定</li>
<li>相邻帧间运动微小</li>
<li>相邻帧间像素点具有强相关性（空间一致性）</li>
</ol>
<h2 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h2><p>由1：$I(x,y,t)&#x3D;I(x+dx,y+dy,t+dt)$</p>
<p>由2：$I(x,y,t)&#x3D;I(x,y,t)+\frac{\partial I}{\partial x}\Delta x+\frac{\partial I}{\partial y}\Delta y+\frac{\partial I}{\partial t}\Delta t+\epsilon$</p>
<p>其中$\epsilon$是高阶无穷小，可以忽略不计<br>推导出：$\frac{\partial I}{\partial x}\Delta x+\frac{\partial I}{\partial y}\Delta y+\frac{\partial I}{\partial t}\Delta t&#x3D;0$</p>
<p>两边同除 $dt$：$\frac{\partial I}{\partial x}\frac{\Delta x}{\Delta t}+\frac{\partial I}{\partial y}\frac{\Delta y}{\Delta t}+\frac{\partial I}{\partial t}&#x3D;0$</p>
<p>设$u, v$为速度矢量，$I_x, I_y$为灰度的方向梯度，$I_t$为灰度的时间梯度，可得：$I_xu+I_yv+I_t&#x3D;0$</p>
<p>超定方程，无法求解。</p>
<p>由3：在相邻像素点间存在强相关性，可得线性方程组</p>
<div>$$\left [
    \begin{matrix}
    I_x(p_1) & I_y(p_1)\\
    ... & ... \\
    I_x(p_N) & I_y(p_N)
\end{matrix}
\right ]
\left [
    \begin{matrix}
    u \\ v
    \end{matrix}
\right ] = -
\left [
    \begin{matrix}
    I_t(p_1) \\ ... \\ I_t(p_N)
    \end{matrix}
\right ]$$</div>

<p>即：<br>$$A \cdot d &#x3D; b$$<br>$$(A^TA)d&#x3D;A^Tb$$<br>可得到Hessian矩阵$A^TA$，使用最小二乘法求解$d$，即为光流矢量。</p>
<p>注：Hessian矩阵的特征值需要同时较大，否则最小二乘会遇到病态矩阵，此时取角点能够满足要求。</p>
]]></content>
  </entry>
  <entry>
    <title>MatLab遗传算法求最小值</title>
    <url>/MatLab%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E5%B0%8F%E5%80%BC/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/img/MatLab%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E5%B0%8F%E5%80%BC/1.jpeg" alt="在这里插入图片描述"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="先上代码"><a href="#先上代码" class="headerlink" title="先上代码"></a>先上代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%%%%%%%%%%%%%%</span><br><span class="line">%%  test.m   %%</span><br><span class="line">%%  Feng1909 %%</span><br><span class="line">%%%%%%%%%%%%%%%</span><br><span class="line">function result = test(a)</span><br><span class="line">	is_max = <span class="number">0</span>;</span><br><span class="line">    x = a(<span class="number">1</span>);</span><br><span class="line">    y = a(<span class="number">2</span>);</span><br><span class="line">    PI = <span class="number">3.141592653</span>;</span><br><span class="line">    <span class="keyword">if</span> is_max == <span class="number">0</span></span><br><span class="line">    	result = -(sin(<span class="number">3</span>*PI*x)*cos(<span class="number">4</span>*PI*y)+cos(<span class="number">5</span>*PI*x*sin(<span class="number">2</span>*PI*y)))*(<span class="number">1</span>);</span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">if</span> is_max == <span class="number">1</span></span><br><span class="line">    	result = (sin(<span class="number">3</span>*PI*x)*cos(<span class="number">4</span>*PI*y)+cos(<span class="number">5</span>*PI*x*sin(<span class="number">2</span>*PI*y)))*(<span class="number">1</span>);</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>定义函数名为<code>test</code>，传入变量为向量<code>a</code>，该向量是一个二维向量，在函数中分别令<code>x</code>和<code>y</code>取<code>a</code>向量的两个值作为待优化函数的输入，当计算函数最大值时，将<code>is_max</code>变量赋值为1，否则为0，通过函数计算返回函数值</p>
<h3 id="GA工具箱"><a href="#GA工具箱" class="headerlink" title="GA工具箱"></a>GA工具箱</h3><p>打开Matlab中的GA工具箱，设置如下：<img src="/2.png" alt="在这里插入图片描述"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>然后点击<code>Start</code>按钮开始优化</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><strong>min:</strong> -1.9999999999719975	x &#x3D; 0.16666739259256413	y &#x3D; -0.5000001466254731 </p>
<p><strong>max:</strong> -1.9638487135569358	x&#x3D; 0.19121141960284982	y &#x3D; 1.2499963437299235</p>
]]></content>
      <categories>
        <category>智能算法</category>
      </categories>
      <tags>
        <tag>遗传算法</tag>
        <tag>MatLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Smart Shark IV</title>
    <url>/SmartSharkIV/</url>
    <content><![CDATA[<h2 id="无人驾驶方程式车队"><a href="#无人驾驶方程式车队" class="headerlink" title="无人驾驶方程式车队"></a>无人驾驶方程式车队</h2><p>官网链接：<a href="https://www.bitfsd.com/">https://www.bitfsd.com/</a></p>
<p>北京理工大学无人驾驶方程式车队 (Beijing Institute of Technology Formula Student Driverless Team, BITFSD) 成立于2015年9月，车队工作室位于北京市房山区北京理工大学良乡校区工程训练中心，现有来自我校不同学院的本科生、研究生共计100余人，是一支以“大学生无人驾驶方程式大赛”等各类创新创业大赛为牵引、瞄向无人车辆高端技术前沿的科技创新团队。</p>
<p>车队每赛季自主设计研发一辆全新的无人驾驶方程式赛车——“灰鲨 (Smart Shark) ”系列，具备环境感知、定位导航、独立驱动及并联式线控底盘等关键技术，以“中国大学生无人驾驶方程式大赛”为主要竞赛项目，并灵活参加其他比赛及社会活动。</p>
<h2 id="加入BITFSD"><a href="#加入BITFSD" class="headerlink" title="加入BITFSD"></a>加入BITFSD</h2><p>我一直对科创有着极大的热情，在7月结束高考后就与自动化学院的RoboMaster机器人战队建立了联系，2019年考入北理工，我参与了机器人队的入队培训，同时也积极地参与到睿信书院（自动化、计算机、光电三大学院）开展的各类科创活动中。但在对机器人队逐渐的熟悉的过程里，我发现团队的氛围似乎并不太适合我，于是在完成培训后并没有参加入队考核，不过在此期间学习的SolidWorks软件对我硕士阶段设计无人机帮助极大。在2019年12月份左右的时候，中国大学生方程式大赛<a href="http://www.formulastudent.com.cn/">FSC</a>落幕，无人方程式车队开始招新，他们制作的招新视频展示了无人驾驶技术作为一项最前沿的科技，而我有机会能够参与其中，这对于刚刚进入大学的我来说具有极大的诱惑力，于是我果断报名了车队。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=79440740&bvid=BV1KJ41167X7&cid=135942081&p=1" 
          width="800" 
          height="450" 
          scrolling="no" 
          border="0" 
          frameborder="no" 
          framespacing="0" 
          allowfullscreen="true"
          style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
  </iframe>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    BITFSD 2019招新宣传视频
  </p>
</div>

<p>其实一开始我的志愿是去机械组，因为我认为机械才是最真实的浪漫，但好在无人组的学长看重了我高中阶段参加信息学竞赛的经历，于是我顺理成章加入了无人系统组，在此特别感谢泰然学长！</p>
<h2 id="参与工作"><a href="#参与工作" class="headerlink" title="参与工作"></a>参与工作</h2><p>进入车队参与正式工作后，恰逢疫情原因完全在做仿真的算法，能够在仿真里控制方程式赛车完成无人驾驶，让当时刚大一的我获得了巨大的成就感，不过这仅仅是开胃菜。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <video width="800" height="450" controls style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
    <source src="2020仿真.mp4" type="video/mp4">
    您的浏览器不支持视频标签。
  </video>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    仿真算法测试
  </p>
</div>

<p>我和学长们一起重构了无人系统的控制框架，采用动力学-运动学融合模型，使用ACADO求解器实现了 <strong>50步200Hz</strong> 的控制求解速度，并同步重写了各个赛项的规划策略。</p>
<p>以第n作者身份在中国汽车工程学会主办的年会技术论坛中发表了论文《Real-Time Motion Planning and Control for a Formula Student》</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="2020控制论文.png" alt="2020年会技术论坛" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    2020年会技术论坛论文
  </p>
</div>

<p>等到2020年底回到学校后，我第一次参与了实车的测试，这是我第一次见到算法在方程式赛车上控制无人驾驶</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <video width="800" height="450" controls style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
    <source src="2020试车跑动.mp4" type="video/mp4">
    您的浏览器不支持视频标签。
  </video>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    Smart Shark IV 2020试车跑动
  </p>
</div>

<p>算法从仿真到实车有一个非常大的gap，有许多硬件的原因需要调整，我们花费了一整个国庆假期，在卡丁车俱乐部租场地调试</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="2020年试车.jpg" alt="2020试车" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    2020年试车现场
  </p>
</div>

<h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><p>由于疫情影响，我没有作为正式队员参与线下赛事，在FSAC 2020年的比赛中，Smart Shark IV获得了<strong>冠军</strong>，并打破了“直线加速”赛项的中国记录，最高时速达到<strong>10m&#x2F;s</strong>，能够勉强看到ETH的AMZ车队尾灯。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=759211060&bvid=BV1864y1z7r3&cid=371655929&p=1" 
          width="800" 
          height="450" 
          scrolling="no" 
          border="0" 
          frameborder="no" 
          framespacing="0" 
          allowfullscreen="true"
          style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
  </iframe>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    FSAC 2020赛季Smart Shark IV直线加速比赛
  </p>
</div>

<p>同时，高速巡迹赛项也获得了冠军。（车载go pro拍摄）</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=246545979&bvid=BV14v411e764&cid=294361355&p=1" 
          width="800" 
          height="450" 
          scrolling="no" 
          border="0" 
          frameborder="no" 
          framespacing="0" 
          allowfullscreen="true"
          style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
  </iframe>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    FSAC 2020赛季Smart Shark IV高速巡迹比赛
  </p>
</div>

<p>在这一年里，我还跟着车队前往央视拍摄了2020中国汽车风云盛典</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="2020中国汽车风云盛典.jpg" alt="2020中国汽车风云盛典" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    2020中国汽车风云盛典
  </p>
</div>

<p>见到了CBD那栋需要用广角镜头才能拍下来的大楼</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="2020CBD大楼.jpg" alt="CBD大楼" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    CBD大楼广角拍摄
  </p>
</div>

<p>这一年是我学习科创的第一年。</p>
]]></content>
      <categories>
        <category>科创项目</category>
      </categories>
      <tags>
        <tag>无人驾驶方程式</tag>
      </tags>
  </entry>
  <entry>
    <title>Smart Shark V</title>
    <url>/SmartSharkV/</url>
    <content><![CDATA[<p><a href="https://blog.fengyunji.site/SmartSharkIV/">《Smart Shark IV——加入车队》</a></p>
<h2 id="方程式大赛队长会"><a href="#方程式大赛队长会" class="headerlink" title="方程式大赛队长会"></a>方程式大赛队长会</h2><p>2020赛季结束后，承蒙学长们的信任，我开始担任无人系统组的组长，负责带领团队进行无人驾驶算法的研发和测试工作。</p>
<p>在寒假返校后，车队受邀作为无人方程式的代表队在队长会上分享我们的无人驾驶系统，而我作为分享人跟随队长前往上海蔚来汽车总部。同时参与了上海车展，见证了蔚来汽车发布ET7、发布第二代换电站。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="蔚来发布会.jpg" alt="蔚来汽车发布会" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    蔚来汽车发布会  
  </p>
</div>

<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="第二代换电站.jpg" alt="蔚来第二代换电站" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    蔚来第二代换电站
  </p>
</div>

<p>结束了上海车展，我们前往蔚来总部举行队长会（应蔚来要求禁止拍摄），我将车队的无人系统分为感知、规划、决策、感知、仿真和实车测试六个部分进行介绍，分享了我们在无人驾驶方程式方面的经验和技术。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="队长会PPT.jpg" alt="队长会无人系统分享" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    队长会无人系统分享
  </p>
</div>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="队长会合影.jpg" alt="队长会无人系统分享" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    队长会合影
  </p>
</div>

<p>队长会结束后，我们前往同济大学嘉定校区参观，与同济大学的无人方程式车队交流，分享了我们在无人驾驶方面的经验和技术。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="同济方程式.jpg" alt="队长会无人系统分享" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    同济方程式车队
  </p>
</div>


<h2 id="车队工作"><a href="#车队工作" class="headerlink" title="车队工作"></a>车队工作</h2><p>在2021赛季中，我们重点优化了以下几方面：</p>
<h3 id="感知融合算法迭代"><a href="#感知融合算法迭代" class="headerlink" title="感知融合算法迭代"></a>感知融合算法迭代</h3><p>得益于百度PPYOLO系列算法的开发，我们也将2020赛季使用的YOLOv4算法迭代为PPYOLO算法，并通过百度的fastinference套件部署于实车，实现了更高的推理速度和精度。</p>
<h3 id="Graph-SLAM"><a href="#Graph-SLAM" class="headerlink" title="Graph SLAM"></a>Graph SLAM</h3><p>我们向奇石乐(Kistler)公司申请了光流速度传感器的赞助，能够以200Hz的频率获取高精度的速度信息，基于准确的速度估计，我们开发因子图优化的Graph SLAM算法，能够在卫星定位失效的时候保证定位准确。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <video width="800" height="450" controls style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
    <source src="GraphSLAM.mp4" type="video/mp4">
    您的浏览器不支持视频标签。
  </video>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    Graph SLAM实车定位效果
  </p>
</div>

<h3 id="离线MPC策略"><a href="#离线MPC策略" class="headerlink" title="离线MPC策略"></a>离线MPC策略</h3><p>高速巡迹是整个比赛中最重要的项目，在赛前并不知道地图，可多次尝试，每次跑动跑三圈，得分取多次跑动中最快的一次。因此，我们可以先慢速跑一次，建立锥桶地图，然后在赛道外离线计算最优路径，以此为目标路径交给MPC控制器进行跟踪控制。</p>
<p>我们将离线轨迹优化问题抽象为最优控制问题：</p>
<div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; font-family: 'Courier New', monospace;">
$$ \begin{aligned} \min_{\mathbf{x},\mathbf{u}} \quad &\int_{s_0}^{s_f} \frac{dt}{ds} ds \\\\ \text{s.t.} \quad &\tilde{x}(s) \in \mathcal{X}_{\text{DoubleTrack}} \\\\ &\text{s.t. } x \in \mathcal{X}_{\text{Static}} \\\\ &\tilde{x}(s) \in \mathcal{X}_{\text{Kinematic}} \\\\ &\tilde{x}(s_f) = \tilde{x}(s_0) \\\\ &x(s) \in \mathcal{X}_{\text{Boundary}} \end{aligned} $$
</div>

<p>同时，在MPC控制器的参数设定方法上，引入Bayes优化方法，将整个跑动过程包装为一个黒盒模型，通过在往年比赛的赛道中不断优化，使得整体跑动耗时减少了**2.35%**。</p>
<h3 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h3><p>我们将上述迭代部署至实车中：</p>
<p>直线加速达到最快速度<strong>18m&#x2F;s</strong>，<strong>5.93s</strong>完成比赛</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <video width="800" height="450" controls style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
    <source src="直线加速.mp4" type="video/mp4">
    您的浏览器不支持视频标签。
  </video>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    直线加速
  </p>
</div>

<p>高速巡迹赛项最快速度达到<strong>10.06m&#x2F;s</strong></p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <video width="800" height="450" controls style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
    <source src="高速循迹.mp4" type="video/mp4">
    您的浏览器不支持视频标签。
  </video>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    高速巡迹
  </p>
</div>

<p>凭借优秀的算法设计，在大家的共同努力下，车队再次获得FSAC的<strong>冠军</strong>。</p>
<h2 id="车队GitHub开源2-0"><a href="#车队GitHub开源2-0" class="headerlink" title="车队GitHub开源2.0"></a>车队GitHub开源2.0</h2><p>为了促进各个大学车队的共同发展，我们将部分算法：MPC控制算法、相机和点云联合感知算法、仿真器、锥桶数据集进行了开源，并在GitHub上发布。</p>
<p>官微：<a href="https://www.bitfsd.com/archives/4437">开源 | 北京理工大学FSAC开源平台2.0上线</a><br>GitHub算法：<a href="https://github.com/bitfsd">BITFSD</a></p>
<p>开源结构包括：</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="开源2.0.png" alt="队长会无人系统分享" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    BITFSD开源2.0结构
  </p>
</div>


<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=332269842&bvid=BV11A411N7w2&cid=314145797&p=1" 
          width="800" 
          height="450" 
          scrolling="no" 
          border="0" 
          frameborder="no" 
          framespacing="0" 
          allowfullscreen="true"
          style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
  </iframe>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    BITFSD 开源2.0仿真跑动效果
  </p>
</div>]]></content>
      <categories>
        <category>科创项目</category>
      </categories>
      <tags>
        <tag>无人驾驶方程式</tag>
      </tags>
  </entry>
  <entry>
    <title>SmartSharkVI</title>
    <url>/SmartSharkVI/</url>
    <content><![CDATA[<p><a href="https://blog.fengyunji.site/SmartSharkIV/">《Smart Shark IV——加入车队》</a><br><a href="https://blog.fengyunji.site/SmartSharkV/">《Smart Shark V——主力队员》</a></p>
<p>2022赛季是我作为主力队员在无人方程式车队的最后一个赛季，在这个赛季中，我们主要围绕八字绕环赛项，在弯道稳定性和速度上进行提升。同时，采用百度的Fast Deploy方案部署了最快最新的PPYOLOE_Plus模型，提升了感知的速度。</p>
<h2 id="力矩分配控制"><a href="#力矩分配控制" class="headerlink" title="力矩分配控制"></a>力矩分配控制</h2><p>在八字绕环中，赛车需要无限逼近横向摩擦力的极限，才能在弯道中获得更高的速度。在22赛季中，机械组和电驱动组首次在Smart Shark中采用了四电机独立驱动方式，这也使得控制算法增加了三个控制变量。对此，我们研发了力矩分配算法，在保证总驱动力不变的前提下，动态调整四个电机的输出力矩，以达到MPC状态量中期望的横摆角速度，在同样的弯道中能获得更高的过弯速度。</p>
<p>同时，我们搭建了数值仿真软件，能够加载自定义的地图和多种车辆模型，包括四电机模型、自行车模型，以及油门-转向MPC和力矩分配MPC等控制方式。通过引入Bayes优化器，能够自动优化MPC的参数，提升车辆的稳定性和速度。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <video width="800" height="450" controls style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
    <source src="simulator.mp4" type="video/mp4">
    您的浏览器不支持视频标签。
  </video>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    RK4数值仿真器
  </p>
</div>

<p>在实际测试中，能够达到<strong>5.5m&#x2F;s</strong>速度下的稳定绕环</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <video width="800" height="450" controls style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
    <source src="八字绕环.mp4" type="video/mp4">
    您的浏览器不支持视频标签。
  </video>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    八字绕环实车效果
  </p>
</div>

<p>相关成果已整理成论文《MPC-QPCA: Nonlinear MPC and Torque Allocation  for Four-Motor Autonomous Race Cars》投递至《Vehicle System Dynamics》</p>
<p>在这个赛季结束后，我便不再参与车队的核心工作，在2023到现在的几年时间里，我仍在参与车队的系统设计和算法开发，但不再参与实车测试和调试工作。这一段车队的经历为我研究生阶段的深入学习打下了基础，在本科的几年里，投入了无数假期，一有时间就去车队，赛车作为一个我从小时候就开始的梦想，终于在大学阶段得以实现。</p>
]]></content>
      <categories>
        <category>科创项目</category>
      </categories>
      <tags>
        <tag>无人驾驶方程式</tag>
      </tags>
  </entry>
  <entry>
    <title>UWB数据集分析</title>
    <url>/UWB%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="UWB"><a href="#UWB" class="headerlink" title="UWB"></a>UWB</h2><p>超宽带（Ultra Wide Band，UWB）技术是一种无线载波通信技术，它不采用正弦载波，而是利用纳秒级的非正弦波窄脉冲传输数据，因此其所占的频谱范围很宽。<br>UWB技术具有系统复杂度低，发射信号功率谱密度低，对信道衰落不敏感，截获能力低，定位精度高等优点，尤其适用于室内等密集多径场所的高速无线接入。</p>
<h2 id="NoopLoop数据分析"><a href="#NoopLoop数据分析" class="headerlink" title="NoopLoop数据分析"></a>NoopLoop数据分析</h2><p>使用NoopLoop公司的UWB节点，在塔克小车上采集数据，需要将数据集中的测距信息导出。本次实验使用Faster-Lio作为小车定位。</p>
<ul>
<li>录制rosbag<br>  rosbag中使用<code>rosbag info</code>查看数据集内容：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">path:        uwb</span><br><span class="line">version:     2.0</span><br><span class="line">duration:    36.9s</span><br><span class="line">start:       Mar 30 2024 17:40:30.91 (1711791630.91)</span><br><span class="line">end:         Mar 30 2024 17:41:07.78 (1711791667.78)</span><br><span class="line">size:        254.1 MB</span><br><span class="line">messages:    18347</span><br><span class="line">compression: none [275/275 chunks]</span><br><span class="line">types:       dynamic_reconfigure/Config            [958f16a05573709014982821e6822580]</span><br><span class="line">            dynamic_reconfigure/ConfigDescription [757ce9d44ba8ddd801bb30bc456f946f]</span><br><span class="line">            geometry_msgs/Twist                   [9f195f881246fdfa2798d1d3eebca84a]</span><br><span class="line">            livox_ros_driver2/CustomMsg           [e4d6829bdfe657cb6c21a746c86b21a6]</span><br><span class="line">            nav_msgs/Odometry                     [cd5e73d190d741a2f92e81eda573aca7]</span><br><span class="line">            nlink_parser/LinktrackNodeframe2      [5e015baafc881617fa57f6ba7fd27747]</span><br><span class="line">            rosgraph_msgs/Log                     [acffd30cd6b6de30f120938c17c593fb]</span><br><span class="line">            sensor_msgs/Imu                       [6a62c6daae103f4ff57a132d6f95cec2]</span><br><span class="line">            sensor_msgs/PointCloud2               [1158d486dd51d683ce2f1be655c3c181]</span><br><span class="line">            std_msgs/Float32                      [73fcbf46b49191e672908e50842a83d4]</span><br><span class="line">            tf2_msgs/TFMessage                    [94810edda583a504dfda3829e70d7eec]</span><br><span class="line">topics:      /Odometry                                366 msgs    : nav_msgs/Odometry                    </span><br><span class="line">            /bat_vol                                1831 msgs    : std_msgs/Float32                     </span><br><span class="line">            /cloud_registered                        366 msgs    : sensor_msgs/PointCloud2              </span><br><span class="line">            /cloud_registered_body                   366 msgs    : sensor_msgs/PointCloud2              </span><br><span class="line">            /cmd_vel                                   2 msgs    : geometry_msgs/Twist                  </span><br><span class="line">            /imu                                    1832 msgs    : sensor_msgs/Imu                      </span><br><span class="line">            /livox/imu                              7334 msgs    : sensor_msgs/Imu                      </span><br><span class="line">            /livox/lidar                             367 msgs    : livox_ros_driver2/CustomMsg          </span><br><span class="line">            /nlink_linktrack_nodeframe2             1834 msgs    : nlink_parser/LinktrackNodeframe2     </span><br><span class="line">            /odom                                   1831 msgs    : nav_msgs/Odometry                    </span><br><span class="line">            /rosout                                   17 msgs    : rosgraph_msgs/Log                     (2 connections)</span><br><span class="line">            /rosout_agg                                2 msgs    : rosgraph_msgs/Log                    </span><br><span class="line">            /tarkbot_robot/parameter_descriptions      1 msg     : dynamic_reconfigure/ConfigDescription</span><br><span class="line">            /tarkbot_robot/parameter_updates           1 msg     : dynamic_reconfigure/Config           </span><br><span class="line">            /tf                                     2197 msgs    : tf2_msgs/TFMessage                    (2 connections)</span><br></pre></td></tr></table></figure>
  其中，<code>/Odometry</code>是定位信息，<code>/nlink_parser/LinktrackNodeframe2</code>是测距信息。</li>
<li>编译msg文件  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p catkin_uwb/src</span><br><span class="line"><span class="built_in">cd</span> catkin_uwb/src</span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/nooploop-dev/nlink_parser.git</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure></li>
<li>使用Python和<code>rosbag play</code>实现数据回放和接收  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> nav_msgs.msg <span class="keyword">import</span> Odometry</span><br><span class="line"><span class="keyword">from</span> nlink_parser.msg <span class="keyword">import</span> LinktrackNodeframe2</span><br><span class="line"></span><br><span class="line">rospy.init_node(<span class="string">&#x27;uwb_test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line">data_single = []</span><br><span class="line">init_time = <span class="number">0.0</span></span><br><span class="line">init = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">odom_callback</span>(<span class="params">msg: Odometry</span>):</span><br><span class="line">    <span class="keyword">global</span> data_single, init, init_time</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> init:</span><br><span class="line">        init_time = msg.header.stamp.to_sec()</span><br><span class="line">    init = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># print(type(msg.header.stamp.to_sec()))</span></span><br><span class="line">    data_tmp = [msg.header.stamp.to_sec() - init_time,</span><br><span class="line">                msg.pose.pose.position.x,</span><br><span class="line">                msg.pose.pose.position.y,</span><br><span class="line">                msg.pose.pose.position.z]</span><br><span class="line">    data.append([data_tmp, data_single])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uwb_callback</span>(<span class="params">msgs</span>):</span><br><span class="line">    <span class="keyword">global</span> data_single</span><br><span class="line">    <span class="comment"># print(len(msg.nodes))</span></span><br><span class="line">    <span class="comment"># print(msg.nodes[0])</span></span><br><span class="line">    <span class="comment"># print(msg.nodes[1])</span></span><br><span class="line">    data_single = []</span><br><span class="line">    <span class="keyword">for</span> msgs <span class="keyword">in</span> msgs.nodes:</span><br><span class="line">        data_single.append(msgs.dis)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    rospy.Subscriber(<span class="string">&#x27;/Odometry&#x27;</span>, Odometry, odom_callback)</span><br><span class="line">    rospy.Subscriber(<span class="string">&#x27;/nlink_linktrack_nodeframe2&#x27;</span>, LinktrackNodeframe2, uwb_callback)</span><br><span class="line">    <span class="comment"># rospy.spin()</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writelines(<span class="string">&#x27;time,x,y,z,uwb1,uwb2,uwb3,uwb4\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> da <span class="keyword">in</span> data:</span><br><span class="line">            f.writelines(<span class="built_in">str</span>(da[<span class="number">0</span>][<span class="number">0</span>]) + <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">                        <span class="built_in">str</span>(da[<span class="number">0</span>][<span class="number">1</span>]) + <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">                        <span class="built_in">str</span>(da[<span class="number">0</span>][<span class="number">2</span>]) + <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">                        <span class="built_in">str</span>(da[<span class="number">0</span>][<span class="number">3</span>]) + <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> sin <span class="keyword">in</span> da[<span class="number">1</span>]:</span><br><span class="line">                f.writelines(<span class="built_in">str</span>(sin) + <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            f.writelines(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
  在程序目录下会出现<code>result.csv</code></li>
</ul>
]]></content>
      <categories>
        <category>UWB</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>UWB</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04安装ros melodic</title>
    <url>/Ubuntu18.04%E5%AE%89%E8%A3%85ros%20melodic/</url>
    <content><![CDATA[<h1 id="Ubuntu18-04安装ros-melodic"><a href="#Ubuntu18-04安装ros-melodic" class="headerlink" title="Ubuntu18.04安装ros melodic"></a>Ubuntu18.04安装ros melodic</h1><p><strong>目前认为比较稳定的安装方案，无需翻墙。 ——BITFSD</strong></p>
<h2 id="换源（系统源）"><a href="#换源（系统源）" class="headerlink" title="换源（系统源）"></a>换源（系统源）</h2><ul>
<li><p>意义：Ubuntu默认源的服务器在国外，由于相关法律法规的限制，大陆对国外服务器的访问速率极慢，因此需要采用国内的镜像源进行替代。经过多次尝试，我们推荐使用中科大源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>这一句指令会要求输入密码，Linux系统的保密措施使得键盘的输入不会在终端里显示</p>
<p><code>gedit</code>是一个文本软件，相当于Windows系统的记事本</p>
<p>将以下内容复制进刚才打开的文本框里，删除文本框里原有的一大堆东西</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>
</li>
<li><p>完成上述步骤后，在终端内输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
</li>
<li><p>再次执行例如<code>sudo apt-get install</code>等命令时发现下载速率有了极大提升</p>
</li>
</ul>
<h2 id="安装ros"><a href="#安装ros" class="headerlink" title="安装ros"></a>安装ros</h2><ul>
<li><p>以下内容可参考<a href="https://wiki.ros.org/">ros官网</a></p>
</li>
<li><p>选择下载源（ros源），我们仍然推荐使用中科大源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置密匙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install curl <span class="comment"># if you haven&#x27;t already installed curl</span></span><br><span class="line">curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装ros-desktop</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-melodic-desktop-full</span><br></pre></td></tr></table></figure>

<p><strong>这一步结束后并不代表ros安装完成</strong></p>
</li>
<li><p>设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p><code>.bashrc</code>文件中保存的环境变量在每次开启终端的时候会自动加载入新终端内，若要手动刷新，可使用<code>source ~/.bashrc</code>命令，<code>~</code>符号代表主目录</p>
<p>若使用主题，比如zsh主题（可以美化终端），则运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/melodic/setup.zsh&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>准备依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化rosdep</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python-rosdep</span><br><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure>

<p>不出意外在运行前两个命令后，第三个命令会运行失败，终端报错显示超时，这是因为<code>rosdep update</code>命令会请求远程服务器，而这个服务器位于国外，所以，我们对默认的地址进行修改，采用国内的镜像进行替代</p>
</li>
<li><p>以下内容参考<a href="https://mp.weixin.qq.com/s/mghnF4sesImHpg4ScZ-bRA">ROS rosdep init&#x2F;update百分百解决 (qq.com)</a></p>
</li>
</ul>
<ol>
<li><p>修改<code>20-default.list</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/ros/rosdep/sources.list.d</span><br><span class="line">sudo gedit 20-default.list </span><br></pre></td></tr></table></figure>

<p>将内容替换为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># os-specific listings first rosdep update</span></span><br><span class="line">yaml https://gitee.com/wybros/rosdistro/raw/master/rosdep/osx-homebrew.yaml osx</span><br><span class="line"></span><br><span class="line"><span class="comment"># generic</span></span><br><span class="line">yaml https://gitee.com/wybros/rosdistro/raw/master/rosdep/base.yaml</span><br><span class="line">yaml https://gitee.com/wybros/rosdistro/raw/master/rosdep/python.yaml</span><br><span class="line">yaml https://gitee.com/wybros/rosdistro/raw/master/rosdep/ruby.yaml</span><br><span class="line">gbpdistro https://gitee.com/wybros/rosdistro/raw/master/releases/fuerte.yaml fuerte</span><br><span class="line"></span><br><span class="line"><span class="comment"># newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>gbpdistro_support.py</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/python2.7/dist-packages/rosdep2/</span><br><span class="line">sudo gedit gbpdistro_support.py</span><br></pre></td></tr></table></figure>

<p>将里面所有的 <code>raw.githubusercontent.com/ros/rosdistro/master</code><br>替换成<code>gitee.com/wybros/rosdistro/raw/master </code></p>
</li>
<li><p>修改<code>rep3.py</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/python2.7/dist-packages/rosdep2/</span><br><span class="line">sudo gedit rep3.py</span><br></pre></td></tr></table></figure>

<p>将里面所有的 <code>raw.githubusercontent.com/ros/rosdistro/master</code><br>替换成<code>gitee.com/wybros/rosdistro/raw/master </code></p>
</li>
<li><p>修改<code>sources_list.py</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/python2.7/dist-packages/rosdep2/</span><br><span class="line">sudo gedit sources_list.py</span><br></pre></td></tr></table></figure>

<p>将里面所有的 <code>raw.githubusercontent.com/ros/rosdistro/master</code><br>替换成<code>gitee.com/wybros/rosdistro/raw/master </code></p>
</li>
<li><p>修改<code>__init__.py</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/python2.7/dist-packages/rosdistro/</span><br><span class="line">sudo gedit __init__.py</span><br></pre></td></tr></table></figure>

<p>将里面所有的 <code>raw.githubusercontent.com/ros/rosdistro/master</code><br>替换成<code>gitee.com/wybros/rosdistro/raw/master </code></p>
</li>
</ol>
<ul>
<li>最后再次执行<code>rosdep update</code>，等待片刻即可安装成功</li>
</ul>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ul>
<li>新建终端，输入<code>roscore</code>，无报错</li>
</ul>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>FSAC</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Zotero添加坚果云存储</title>
    <url>/Zotero%E6%B7%BB%E5%8A%A0%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h2 id="设置文件同步"><a href="#设置文件同步" class="headerlink" title="设置文件同步"></a>设置文件同步</h2><ol>
<li>登录坚果云网站：<a href="https://www.jianguoyun.com/">https://www.jianguoyun.com/</a></li>
<li>点击账户信息<br><img src="/Zotero%E6%B7%BB%E5%8A%A0%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%AD%98%E5%82%A8/1.png" alt="alt text"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
<li>选中安全选项<br><img src="/Zotero%E6%B7%BB%E5%8A%A0%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%AD%98%E5%82%A8/2.png" alt="alt text"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
<li>在Zotero的同步中选择<code>WebDAV</code>，将安全选项中右侧的服务器地址、账号和密码复制到Zotero的同步中<br><img src="/Zotero%E6%B7%BB%E5%8A%A0%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%AD%98%E5%82%A8/3.png" alt="alt text"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
<li>点击<code>验证服务器</code>，如果成功则会显示<code>文件同步设定成功</code>，可返回正常同步数据</li>
</ol>
<h2 id="设置百度API翻译"><a href="#设置百度API翻译" class="headerlink" title="设置百度API翻译"></a>设置百度API翻译</h2><ol>
<li>下载Translate for Zotero插件：<a href="https://zotero-chinese.com/plugins/">https://zotero-chinese.com/plugins/</a></li>
<li>在设置中选择<code>百度垂直领域</code><br><img src="/Zotero%E6%B7%BB%E5%8A%A0%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%AD%98%E5%82%A8/4.png" alt="alt text"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></li>
<li>前往<a href="https://fanyi-api.baidu.com/manage/developer%E8%8E%B7%E5%8F%96%E5%BA%94%E7%94%A8ID%E5%92%8CSecret">https://fanyi-api.baidu.com/manage/developer获取应用ID和Secret</a> Key</li>
</ol>
<h2 id="设置GPT"><a href="#设置GPT" class="headerlink" title="设置GPT"></a>设置GPT</h2><ol>
<li>下载插件：Awesome GPT</li>
<li>进入无问芯穹：<a href="https://cloud.infini-ai.com/genstudio/model">https://cloud.infini-ai.com/genstudio/model</a></li>
<li>可自主选择模型，以DeepSeek-R1为例，复制API Key</li>
<li>在Zotero的设置中选择<code>Awesome GPT</code>，Base API填写”<a href="https://cloud.infini-ai.com/maas%22%EF%BC%8CAPI">https://cloud.infini-ai.com/maas&quot;，API</a> Key填写刚才复制的API Key，Model选择’deepseek-r1’</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Zotero</tag>
        <tag>坚果云</tag>
      </tags>
  </entry>
  <entry>
    <title>colmap处理流程</title>
    <url>/colmap%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="Gaussian-Splatting中COLMAP处理流程"><a href="#Gaussian-Splatting中COLMAP处理流程" class="headerlink" title="Gaussian Splatting中COLMAP处理流程"></a>Gaussian Splatting中COLMAP处理流程</h2><ul>
<li>feature_extractor</li>
<li>exhaustive_matcher</li>
<li>mapper</li>
<li>image_undistorter</li>
</ul>
<h2 id="feature-extractor"><a href="#feature-extractor" class="headerlink" title="feature_extractor"></a>feature_extractor</h2><p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">colmap feature_extractor \</span><br><span class="line">        --database_path /home/yugrp01/dataset//distorted/database.db \</span><br><span class="line">        --image_path /home/yugrp01/dataset//input \</span><br><span class="line">        --ImageReader.single_camera 1 \</span><br><span class="line">        --ImageReader.camera_model OPENCV \</span><br><span class="line">        --SiftExtraction.use_gpu 1</span><br></pre></td></tr></table></figure>
<p>作用：提取图像特征，保存在database.db中，默认提取SIFT特征</p>
<h2 id="exhaustive-matcher"><a href="#exhaustive-matcher" class="headerlink" title="exhaustive_matcher"></a>exhaustive_matcher</h2><p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">colmap exhaustive_matcher \</span><br><span class="line">        --database_path /home/yugrp01/dataset//distorted/database.db \</span><br><span class="line">        --SiftMatching.use_gpu 1</span><br></pre></td></tr></table></figure>
<p>作用：建立SIFT匹配，仍保存在database.db中</p>
<h2 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h2><p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">colmap mapper \</span><br><span class="line">        --database_path /home/yugrp01/dataset//distorted/database.db \</span><br><span class="line">        --image_path /home/yugrp01/dataset//input \</span><br><span class="line">        --output_path /home/yugrp01/dataset//distorted/sparse \</span><br><span class="line">        --Mapper.ba_global_function_tolerance=0.000001</span><br></pre></td></tr></table></figure>
<p>作用：相机位姿求解与优化，在sparse文件夹下生成多个文件夹，一个文件夹对应一个相机，可以使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">colmap model_converter \</span><br><span class="line">        --input_path /home/yugrp01/dataset//distorted/sparse/0 \</span><br><span class="line">        --output_path /home/yugrp01/dataset//distorted/sparse \</span><br><span class="line">        --output_type TXT</span><br></pre></td></tr></table></figure>
<p>将<code>sparse/0</code>中的<code>.bin</code>文件转换为<code>.txt</code>文件<br>mapper生成的文件为：</p>
<ul>
<li><code>cameras.bin</code>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Camera list with one line of data per camera:</span><br><span class="line">#   CAMERA_ID, MODEL, WIDTH, HEIGHT, PARAMS[]</span><br><span class="line"># Number of cameras: 1</span><br><span class="line">1 OPENCV 720 1280 1120.1152718874055 1173.5453696531381 360 640 0.056079336784625386 -0.085614936918791046 -0.0035479370208935067 -0.00036881030187927946</span><br></pre></td></tr></table></figure>
  内容为：相机ID，相机模型(OPENCV)，图像宽度，图像高度，相机内参</li>
<li><code>images.bin</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Image list with two lines of data per image:</span><br><span class="line">#   IMAGE_ID, QW, QX, QY, QZ, TX, TY, TZ, CAMERA_ID, NAME</span><br><span class="line">#   POINTS2D[] as (X, Y, POINT3D_ID)</span><br><span class="line"># Number of images: 151, mean observations per image: 899.41059602649011</span><br><span class="line">139 0.97558110892036964 0.024064873414301063 0.19083814762661425 0.10603387758494046 2.0978674295044142 1.9014249718018907 -4.6688458262732428 1 0141.jpg</span><br><span class="line">342.20053100585938 2.5576851367950439 -1 294.03756713867188 8.3915014266967773 -1 710.8546142578125 9.4258575439453125 -1 320.52203369140625 22.885553359985352 -1 320.52203369140625 22.885553359985352 -1 333.97128295898438 25.935688018798828 -1 333.97128295898438 25.935688018798828 -1 707.79693603515625 26.888103485107422 -1 406.88790893554688 29.064554214477539 -1 320.9920654296875 30.22673225402832 -1 320.9920654296875 30.22673225402832 -1 294.0234375 31.514423370361328 -1 324.99057006835938 38.868644714355469 -1 324.99057006835938 38.868644714355469 -1 331.5408935546875 62.630966186523438 -1 331.5408935546875 62.630966186523438 -1 292.57781982421875 69.072616577148438 -1 292.57781982421875 69.072616577148438 -1 302.60647583007812 71.223625183105469 -1 302.60647583007812 71.223625183105469 -1 317.67379760742188 74.406044006347656 -1 317.67379760742188 74.406044006347656 -1 286.7628173828125 74.998977661132812 -1 286.7628173828125 74.998977661132812 -1 329.06219482421875 76.793952941894531 -1 329.06219482421875 76.793952941894531 -1 312.201416015625 80.79327392578125 -1 312.201416015625 80.79327392578125 -1 309.02401733398438 ...</span><br></pre></td></tr></table></figure>
  内容为：图像ID，相机位姿，相机ID，图像名称，图像特征点(包括3D点ID，大多数是-1)</li>
<li><code>points3D.bin</code>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 3D point list with one line of data per point:</span><br><span class="line">#   POINT3D_ID, X, Y, Z, R, G, B, ERROR, TRACK[] as (IMAGE_ID, POINT2D_IDX)</span><br><span class="line"># Number of points: 22731, mean track length: 5.9747041485196428</span><br><span class="line">22664 9.3397715374614645 -0.5320455884139641 -0.35230666689830648 174 173 169 0.54436590619680714 11 963 3 47</span><br></pre></td></tr></table></figure>
  内容为：3D点ID，3D点坐标，3D点颜色，3D点误差，3D点在图像中的投影(图像ID，特征点ID)</li>
</ul>
<h2 id="image-undistorter"><a href="#image-undistorter" class="headerlink" title="image_undistorter"></a>image_undistorter</h2><p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">colmap image_undistorter \</span><br><span class="line">        --image_path /home/yugrp01/dataset//input \</span><br><span class="line">        --input_path /home/yugrp01/dataset//distorted/sparse/0 \</span><br><span class="line">        --output_path /home/yugrp01/dataset/ \</span><br><span class="line">        --output_type COLMAP</span><br></pre></td></tr></table></figure>
<p>作用：去畸变，生成去畸变后的图像，保存在<code>/home/yugrp01/dataset/</code>中</p>
<h2 id="替代COLMAP"><a href="#替代COLMAP" class="headerlink" title="替代COLMAP"></a>替代COLMAP</h2><p>COLMAP在GS中的应用仅是通过特征点匹配来获得相机位姿，可以使用其他方法代替COLMAP，如ORB-SLAM2，VINS-Mono等<br>具体代码位于<code>scene/dataset_readers.py</code>的<code>readColmapSceneInfo</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cameras_extrinsic_file = os.path.join(path, <span class="string">&quot;sparse/0&quot;</span>, <span class="string">&quot;images.bin&quot;</span>)</span><br><span class="line">    cameras_intrinsic_file = os.path.join(path, <span class="string">&quot;sparse/0&quot;</span>, <span class="string">&quot;cameras.bin&quot;</span>)</span><br><span class="line">    cam_extrinsics = read_extrinsics_binary(cameras_extrinsic_file)</span><br><span class="line">    cam_intrinsics = read_intrinsics_binary(cameras_intrinsic_file)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    cameras_extrinsic_file = os.path.join(path, <span class="string">&quot;sparse/0&quot;</span>, <span class="string">&quot;images.txt&quot;</span>)</span><br><span class="line">    cameras_intrinsic_file = os.path.join(path, <span class="string">&quot;sparse/0&quot;</span>, <span class="string">&quot;cameras.txt&quot;</span>)</span><br><span class="line">    cam_extrinsics = read_extrinsics_text(cameras_extrinsic_file)</span><br><span class="line">    cam_intrinsics = read_intrinsics_text(cameras_intrinsic_file)</span><br><span class="line"></span><br><span class="line">reading_dir = <span class="string">&quot;images&quot;</span> <span class="keyword">if</span> images == <span class="literal">None</span> <span class="keyword">else</span> images</span><br><span class="line">cam_infos_unsorted = readColmapCameras(cam_extrinsics=cam_extrinsics, cam_intrinsics=cam_intrinsics, images_folder=os.path.join(path, reading_dir))</span><br><span class="line">cam_infos = <span class="built_in">sorted</span>(cam_infos_unsorted.copy(), key = <span class="keyword">lambda</span> x : x.image_name)</span><br></pre></td></tr></table></figure>
<p><code>cam_infos</code>中是每张图的位姿和图片参数，比如<code>cam_infos[:3]</code>为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[CameraInfo(uid=1, R=array([[ 0.38001315, -0.23005276,  0.89591614],</span><br><span class="line">[ 0.23318819,  0.96112063,  0.14788647],</span><br><span class="line">[-0.89510518,  0.15271826,  0.41888406]]), T=array([-4.40688372,  0.55051116, -2.53033356]), FovY=0.9846972407709619, FovX=0.6130229182895368, image=&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=709x1259 at 0x7F54D3CCA110&gt;, image_path=<span class="string">&#x27;/home/yugrp01/dataset/images/0001.jpg&#x27;</span>, image_name=<span class="string">&#x27;0001&#x27;</span>, width=709, height=1259), </span><br><span class="line">CameraInfo(uid=1, R=array([[ 0.39393992, -0.22690239,  0.89068886],</span><br><span class="line">[ 0.23024742,  0.96251379,  0.14336435],</span><br><span class="line">[-0.88983002,  0.14860187,  0.43141629]]), T=array([-4.41738619,  0.52536371, -2.47282881]), FovY=0.9846972407709619, FovX=0.6130229182895368, image=&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=709x1259 at 0x7F54D3CCA050&gt;, image_path=<span class="string">&#x27;/home/yugrp01/dataset/images/0002.jpg&#x27;</span>, image_name=<span class="string">&#x27;0002&#x27;</span>, width=709, height=1259), C</span><br><span class="line">ameraInfo(uid=1, R=array([[ 0.4211666 , -0.22125352,  0.87958261],</span><br><span class="line">[ 0.22593051,  0.96481198,  0.13451114],</span><br><span class="line">[-0.87839291,  0.14207294,  0.45633451]]), T=array([-4.45405079,  0.48200487, -2.35331303]), FovY=0.9846972407709619, FovX=0.6130229182895368, image=&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=709x1259 at 0x7F54D3CB3F50&gt;, image_path=<span class="string">&#x27;/home/yugrp01/dataset/images/0003.jpg&#x27;</span>, image_name=<span class="string">&#x27;0003&#x27;</span>, width=709, height=1259)]</span><br></pre></td></tr></table></figure>
<p>其中，<code>CameraInfo</code>包含了相机位姿，图片，图片路径等信息，<code>uid</code>为相机ID，<code>R</code>为旋转矩阵，<code>T</code>为平移向量，<code>FovY</code>和<code>FovX</code>为视场角，<code>image</code>为图片，<code>image_path</code>为图片路径，<code>image_name</code>为图片名称，<code>width</code>和<code>height</code>为图片宽高，仅需自行输入<code>R</code>，<code>T</code>即可</p>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>GaussianSplating</tag>
        <tag>COLMAP</tag>
      </tags>
  </entry>
  <entry>
    <title>habitat-sim和habitat-lab环境搭建</title>
    <url>/habitat-sim%E5%92%8Chabitat-lab%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>承接上文搭建斯坦福大学GibsonEnv环境失败，在本文中重新基于habitat-sim开始搭建环境。</p>
<h2 id="habitat-sim环境搭建"><a href="#habitat-sim环境搭建" class="headerlink" title="habitat-sim环境搭建"></a>habitat-sim环境搭建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n habitat python=3.9 cmake=3.14.0</span><br><span class="line">conda activate habitat</span><br><span class="line">conda install habitat-sim withbullet -c conda-forge -c aihabitat</span><br></pre></td></tr></table></figure>

<h2 id="habitat-lab环境搭建"><a href="#habitat-lab环境搭建" class="headerlink" title="habitat-lab环境搭建"></a>habitat-lab环境搭建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --branch stable https://github.com/facebookresearch/habitat-lab.git</span><br><span class="line"><span class="built_in">cd</span> habitat-lab</span><br><span class="line">pip install -e habitat-lab  <span class="comment"># install habitat_lab</span></span><br><span class="line">pip install -e habitat-baselines  <span class="comment"># install habitat_baselines</span></span><br></pre></td></tr></table></figure>
<p>在完成环境安装后，可以使用<code>python examples/example.py</code>来测试环境是否安装成功。一定会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ValueError: Requested RearrangeDataset config paths <span class="string">&#x27;data/datasets/replica_cad/rearrange/v2/train/rearrange_easy.json.gz&#x27;</span> or <span class="string">&#x27;data/replica_cad/&#x27;</span> are not downloaded locally. Aborting.</span><br></pre></td></tr></table></figure>
<p>这需要我们下载数据集，下载的是replicaCAD数据集，但是下载方式需要特别注意，需要参考这个地方<a href="https://github.com/facebookresearch/habitat-sim/blob/dfb388e29e5e1f25da4b576305e85bdc0be140b8/src_python/habitat_sim/utils/datasets_download.py#L341">链接</a>去分开下载数据集，否则数据集不全，需要执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m habitat_sim.utils.datasets_download --uids &lt;replica_datasets&gt; --data-path data/</span><br></pre></td></tr></table></figure>
<p><code>replica_dataset</code>为:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;replica_cad_dataset&quot;</span>,</span><br><span class="line"><span class="string">&quot;hab_fetch&quot;</span>,</span><br><span class="line"><span class="string">&quot;ycb&quot;</span>,</span><br><span class="line"><span class="string">&quot;rearrange_pick_dataset_v0&quot;</span>,</span><br><span class="line"><span class="string">&quot;rearrange_dataset_v2&quot;</span>,</span><br></pre></td></tr></table></figure>
<p>但是，在下载的时候还有坑。直接运行命令在下载完解压的时候会出现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: unknown shorthand flag: <span class="string">&#x27;f&#x27;</span> <span class="keyword">in</span> -f</span><br></pre></td></tr></table></figure>
<p>这是关于git-lfs的报错，可能与当时的版本有关系，因此完整命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m habitat_sim.utils.datasets_download --uids &lt;replica_datasets&gt; --data-path data/ --no-prune</span><br></pre></td></tr></table></figure>
<p>安装完成后，可以使用<code>python examples/example.py</code>来测试环境是否安装成功。</p>
<h2 id="相机渲染测试"><a href="#相机渲染测试" class="headerlink" title="相机渲染测试"></a>相机渲染测试</h2><p>可运行以下代码，通过<code>WSAD</code>控制相机移动。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> habitat</span><br><span class="line"><span class="keyword">from</span> habitat.sims.habitat_simulator.actions <span class="keyword">import</span> HabitatSimActions</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FORWARD_KEY=<span class="string">&quot;w&quot;</span></span><br><span class="line">LEFT_KEY=<span class="string">&quot;a&quot;</span></span><br><span class="line">RIGHT_KEY=<span class="string">&quot;d&quot;</span></span><br><span class="line">FINISH=<span class="string">&quot;f&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform_rgb_bgr</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="keyword">return</span> image[:, :, [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    env = habitat.Env(</span><br><span class="line">        config=habitat.get_config(<span class="string">&quot;benchmark/nav/pointnav/pointnav_habitat_test.yaml&quot;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Environment creation successful&quot;</span>)</span><br><span class="line">    observations = env.reset()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Destination, distance: &#123;:3f&#125;, theta(radians): &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">        observations[<span class="string">&quot;pointgoal_with_gps_compass&quot;</span>][<span class="number">0</span>],</span><br><span class="line">        observations[<span class="string">&quot;pointgoal_with_gps_compass&quot;</span>][<span class="number">1</span>]))</span><br><span class="line">    cv2.imshow(<span class="string">&quot;RGB&quot;</span>, transform_rgb_bgr(observations[<span class="string">&quot;rgb&quot;</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Agent stepping around inside environment.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    count_steps = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> env.episode_over:</span><br><span class="line">        keystroke = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> keystroke == <span class="built_in">ord</span>(FORWARD_KEY):</span><br><span class="line">            action = HabitatSimActions.move_forward</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;action: FORWARD&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> keystroke == <span class="built_in">ord</span>(LEFT_KEY):</span><br><span class="line">            action = HabitatSimActions.turn_left</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;action: LEFT&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> keystroke == <span class="built_in">ord</span>(RIGHT_KEY):</span><br><span class="line">            action = HabitatSimActions.turn_right</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;action: RIGHT&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> keystroke == <span class="built_in">ord</span>(FINISH):</span><br><span class="line">            action = HabitatSimActions.stop</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;action: FINISH&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;INVALID KEY&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        observations = env.step(action)</span><br><span class="line">        count_steps += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Destination, distance: &#123;:3f&#125;, theta(radians): &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            observations[<span class="string">&quot;pointgoal_with_gps_compass&quot;</span>][<span class="number">0</span>],</span><br><span class="line">            observations[<span class="string">&quot;pointgoal_with_gps_compass&quot;</span>][<span class="number">1</span>]))</span><br><span class="line">        cv2.imshow(<span class="string">&quot;RGB&quot;</span>, transform_rgb_bgr(observations[<span class="string">&quot;rgb&quot;</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Episode finished after &#123;&#125; steps.&quot;</span>.<span class="built_in">format</span>(count_steps))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        action == HabitatSimActions.stop</span><br><span class="line">        <span class="keyword">and</span> observations[<span class="string">&quot;pointgoal_with_gps_compass&quot;</span>][<span class="number">0</span>] &lt; <span class="number">0.2</span></span><br><span class="line">    ):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you successfully navigated to destination point&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;your navigation was unsuccessful&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    example()</span><br></pre></td></tr></table></figure>

<p>gibson数据集下载:<br><img src="gibson.jpeg"   data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/></p>
<!-- <img src="/habitat-sim和habitat-lab环境搭建/gibson.jpeg"   data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/> -->]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>具身智能</tag>
      </tags>
  </entry>
  <entry>
    <title>laserscan转gridmap</title>
    <url>/laserscan%E8%BD%ACgridmap/</url>
    <content><![CDATA[<h2 id="CartoGrapher"><a href="#CartoGrapher" class="headerlink" title="CartoGrapher"></a>CartoGrapher</h2><p>Cartographer是Google推出的一套基于图优化的激光SLAM算法，它同时支持2D和3D激光SLAM，可以跨平台使用，支持Laser、IMU、Odemetry、GPS等多种传感器配置。该算法可以实现实时定位和建图。<br><img src="/img/laserscan%E8%BD%ACgridmap/cartographer.gif" alt="CartoGrapher"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="LaserScan"><a href="#LaserScan" class="headerlink" title="LaserScan"></a>LaserScan</h2><p>测量的激光扫描角度，逆时针为正<br>设备坐标帧的0度面向前（沿着X轴方向）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Header header            <span class="comment"># Header也是一个结构体,包含了seq,stamp,frame_id,其中seq指的是扫描顺序增加的id,stamp包含了开始扫描的时间和与开始扫描的时间差,frame_id是扫描的参考系名称.注意扫描是逆时针从正前方开始扫描的.</span></span><br><span class="line"> </span><br><span class="line">float32 angle_min        <span class="comment"># 开始扫描的角度(角度)</span></span><br><span class="line">float32 angle_max        <span class="comment"># 结束扫描的角度(角度)</span></span><br><span class="line">float32 angle_increment  <span class="comment"># 每一次扫描增加的角度(角度)</span></span><br><span class="line"> </span><br><span class="line">float32 time_increment   <span class="comment"># 测量的时间间隔(s)</span></span><br><span class="line">float32 scan_time        <span class="comment"># 扫描的时间间隔(s)</span></span><br><span class="line"> </span><br><span class="line">float32 range_min        <span class="comment"># 距离最小值(m)</span></span><br><span class="line">float32 range_max        <span class="comment"># 距离最大值(m)</span></span><br><span class="line"> </span><br><span class="line">float32[] ranges         <span class="comment"># 距离数组(长度360)(注意: 值 &lt; range_min 或 &gt; range_max 应当被丢弃)</span></span><br><span class="line">float32[] intensities    <span class="comment"># 与设备有关,强度数组(长度360)</span></span><br></pre></td></tr></table></figure>

<h2 id="OccupancyGrid"><a href="#OccupancyGrid" class="headerlink" title="OccupancyGrid"></a>OccupancyGrid</h2><p>栅格地图定义 ：栅格地图就是用一个个栅格组成的网格来代表地图. 栅格里可以存储不同的数值, 代表这个栅格的不同含义.<br><img src="/img/laserscan%E8%BD%ACgridmap/occupancygrid.png" alt="栅格地图示意图"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>ROS的栅格地图使用</p>
<ul>
<li>白色代表空闲，也就是可通过区域，其存储的值为 0；</li>
<li>黑色代表占用，也就是不可通过区域，其存储的值为 100；</li>
<li>灰色代表未知，就是说目前还不清楚这个栅格是否可以通过，其存储的值为 -1．</li>
</ul>
<p><code>nav_msgs/OccupancyGrid.msg</code>如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std_msgs/Header header</span><br><span class="line">nav_msgs/MapMetaData info</span><br><span class="line">int8[] data</span><br></pre></td></tr></table></figure>
<p><code>info</code>中包含起始点位置、地图宽和高、地图分辨率：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map.info.width; // 单位是栅格数(个)</span><br><span class="line">map.info.height;</span><br><span class="line">map.info.resolution;</span><br><span class="line">map.info.origin.position.x; // 单位是米</span><br><span class="line">map.info.origin.position.y;</span><br></pre></td></tr></table></figure>
<p><code>data</code>中包含地图每个栅格的占用情况，栅格地图的序号是行优先，从左下角开始，从左到右，从下到上的遍历data数组的数据。</p>
]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>CartoGrapher</tag>
        <tag>LaserScan</tag>
        <tag>OccupancyGrid</tag>
      </tags>
  </entry>
  <entry>
    <title>nerfstudio</title>
    <url>/nerfstudio/</url>
    <content><![CDATA[<h2 id="nerfstudio"><a href="#nerfstudio" class="headerlink" title="nerfstudio"></a>nerfstudio</h2><p>Nerfstudio，一个用于NeRF开发的模块化PyTorch框架。框架中用于实现基于NeRF的方法的组件即插即用，使得研究人员和相关从业者可以轻松地将NeRF集成到自己的项目中。框架的模块化设计支持实时可视化工具，导入用户真实世界捕获的数据集外（in-the-wild）数据，以及导出为视频，点云和网格表示的工具。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官网安装方式可能会导致tiny-cuda-nn安装失败</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name nerfstudio -y python=3.8</span><br><span class="line">conda activate nerfstudio</span><br><span class="line"></span><br><span class="line">conda install pytorch==2.1.2 torchvision==0.16.2 pytorch-cuda=11.8 -c pytorch -c nvidia</span><br><span class="line">pip install ninja git+https://gitee.com/Xiaoshier2021/tiny-cuda-nn/<span class="comment">#subdirectory=bindings/torch</span></span><br><span class="line">conda install -c <span class="string">&quot;nvidia/label/cuda-11.8.0&quot;</span> cuda-toolkit</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/nerfstudio-project/nerfstudio.git</span><br><span class="line"><span class="built_in">cd</span> nerfstudio</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure>

<h3 id="前处理数据"><a href="#前处理数据" class="headerlink" title="前处理数据"></a>前处理数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ns-process-data images --data ~/data_nerf/images/ --output-dir ~/data_nerf/out/</span><br></pre></td></tr></table></figure>
<h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ns-train nerfacto --data ~/data_nerf/out/ --vis viewer+tensorboard</span><br></pre></td></tr></table></figure>
<p>可视化工具：<a href="http://localhost:7007/">http://localhost:7007/</a></p>
<h3 id="评测"><a href="#评测" class="headerlink" title="评测"></a>评测</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ns-eval --load-config outputs/out/nerfacto/2024-09-20_100756/config.yml --output_path outputs/out/nerfacto/result.json --render-output-path outputs/out/nerfacto/render</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nerf</category>
      </categories>
      <tags>
        <tag>3D Reconstruction</tag>
      </tags>
  </entry>
  <entry>
    <title>orin nx 重装</title>
    <url>/orin-nx-%E9%87%8D%E8%A3%85/</url>
    <content><![CDATA[<h2 id="刷写系统镜像"><a href="#刷写系统镜像" class="headerlink" title="刷写系统镜像"></a>刷写系统镜像</h2><ol>
<li>使用USB线缆连接ORIN的OTG-USB端口与Ubuntu系统开发主机的USB端口</li>
<li>将REC按键按下不松开，然后给系统供电，按键保持3秒以上，释放REC按键</li>
<li>在主机终端显示界面输入 lsusb，若有显示NVIDIA设备，则成功进入Recovery恢复模式，此时可进行后续刷机，备份等操作</li>
<li>下载<a href="https://developer.nvidia.com/sdk-manager">Orin NX SDK</a></li>
<li>刷写Jetson 5.1.3 （注：只能刷5.1.3，5.1.2和5.1.4都不行）<br> <img src="/orin-nx-%E9%87%8D%E8%A3%85/1.png" alt="刷写镜像"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br> 刷写完成后点击skip，然后点击finish</li>
<li>重启设备，进入系统</li>
<li>安装阿木的补丁 <a href="https://download.amovlab.com/orin_nx/amov-orin-jetson3550.deb">https://download.amovlab.com/orin_nx/amov-orin-jetson3550.deb</a><br><strong>注：</strong> Jetson Pack 5.x是Ubuntu 20.04，Jetson Pack 6.x是Ubuntu 22.04</li>
</ol>
<h2 id="安装GPU相关库"><a href="#安装GPU相关库" class="headerlink" title="安装GPU相关库"></a>安装GPU相关库</h2><ol>
<li>安装CUDA 11.4<br><code>sudo apt-get install cuda-11.4</code></li>
<li>安装cuDNN 8<br> <code>sudo apt-get install libcudnn8</code></li>
<li>安装TensorRT<br> 下载这个tar包和deb包<br> <img src="/orin-nx-%E9%87%8D%E8%A3%85/2.png" alt="TensorRT"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><ol>
<li>系统安装TensorRT <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i nv-tensorrt-repo-ubuntu2004-cuda11.4-trt8.2.5.1-ga-20220505_1-1_arm64.deb</span><br><span class="line">sudo apt-get install tensorrt</span><br></pre></td></tr></table></figure></li>
<li>安装TensorRT的Python库<br> 解压刚刚下载的tar包，进入python文件夹，pip安装对应版本的whl文件</li>
</ol>
</li>
<li>OpenCV4安装 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.amovlab.com/model/install/common/opencv470-install.sh</span><br><span class="line"><span class="built_in">chmod</span> +x opencv470-install.sh</span><br><span class="line">./opencv470-install.sh</span><br></pre></td></tr></table></figure>
 可以将sh脚本里的with_CUDA改为ON，以此安装VINS-GPU</li>
</ol>
]]></content>
      <categories>
        <category>无人机</category>
      </categories>
      <tags>
        <tag>Orin NX</tag>
      </tags>
  </entry>
  <entry>
    <title>git submodule使用</title>
    <url>/submodule/</url>
    <content><![CDATA[<h2 id="在项目中使用子模块"><a href="#在项目中使用子模块" class="headerlink" title="在项目中使用子模块"></a>在项目中使用子模块</h2><h3 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add +仓库地址 +本地路径</span><br></pre></td></tr></table></figure>
<p>比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add https://github.com/xxx/xxx.git ./submodule/xxx</span><br></pre></td></tr></table></figure>
<p>如果提示该仓库已经存在，应清除该仓库的缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached ./submodule/xxx</span><br></pre></td></tr></table></figure>
<h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recurse-submodules +仓库地址</span><br></pre></td></tr></table></figure>
<h3 id="更新子模块"><a href="#更新子模块" class="headerlink" title="更新子模块"></a>更新子模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>
<p>其中<code>--init</code>表示初始化子模块，<code>--recursive</code>表示递归更新子模块。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vins回环检测</title>
    <url>/vins%E5%9B%9E%E7%8E%AF%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h2 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h2><p>在使用Mast3r进行三维重建的时候，原始方法是对n张图片通过n*(n-1)的复杂度进行遍历匹配，但是这种方法太费时：50张图需要2450次匹配，单次匹配需要0.3秒(Nvidia RTX 3060)，共计需要12分钟。</p>
<p>当手动选取具有共视区的图像对时，只选取了241组配对图片，只需要1.2分钟即可匹配完成，因此根据共视区选取图像对的方法，可以大大减少匹配时间。</p>
<h2 id="回环检测"><a href="#回环检测" class="headerlink" title="回环检测"></a>回环检测</h2><p>在当前的研究中，可以完成共视区计算的算法主要应用与SLAM的回环检测中，回环检测是SLAM中的一个重要环节，它可以提高地图的一致性，减少累积误差，提高定位的精度。常用算法有ORB、VINS等。</p>
<p>因此可以选用VINS的回环检测算法，通过计算共视区，选取具有共视区的图像对，减少匹配时间。</p>
<h2 id="VINS回环检测"><a href="#VINS回环检测" class="headerlink" title="VINS回环检测"></a>VINS回环检测</h2><p>VINS回环检测的主要流程如下：</p>
<ol>
<li>利用DBoW2进行回环检测。</li>
<li>除了用于单目VIO的角点特征外，还添加了500个角点并使用BRIEF描述子描述。额外的角点特征用于在回环检测中实现更好的召回率。</li>
<li>DBoW2在时间和空间一致性检查后返回回环检测候选帧。</li>
<li>VINS保留所有用于特征检索的BRIEF描述子，丢弃原始图像以减少内存消耗。</li>
<li>检测到回环时，通过BRIEF描述子匹配找到对应关系，建立局部滑动窗口与回环候选帧之间的连接。</li>
</ol>
<p>算法流程图为：<br><img src="/vins%E5%9B%9E%E7%8E%AF%E6%A3%80%E6%B5%8B/vins.png" alt="alt text"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="DBoW2"><a href="#DBoW2" class="headerlink" title="DBoW2"></a>DBoW2</h3><p>DBoW2是一个用于图像检索的库，它可以用于回环检测。</p>
<p>代码为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">KeyFrame::computeWindowBRIEFPoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">BriefExtractor <span class="title">extractor</span><span class="params">(BRIEF_PATTERN_FILE.c_str())</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)point_2d_uv.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">	    cv::KeyPoint key;</span><br><span class="line">	    key.pt = point_2d_uv[i];</span><br><span class="line">	    window_keypoints.<span class="built_in">push_back</span>(key);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">extractor</span>(image, window_keypoints, window_brief_descriptors);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KeyFrame::computeBRIEFPoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">BriefExtractor <span class="title">extractor</span><span class="params">(BRIEF_PATTERN_FILE.c_str())</span></span>;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> fast_th = <span class="number">20</span>; <span class="comment">// corner detector response threshold</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="number">1</span>)</span><br><span class="line">		cv::<span class="built_in">FAST</span>(image, keypoints, fast_th, <span class="literal">true</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		vector&lt;cv::Point2f&gt; tmp_pts;</span><br><span class="line">		cv::<span class="built_in">goodFeaturesToTrack</span>(image, tmp_pts, <span class="number">500</span>, <span class="number">0.01</span>, <span class="number">10</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)tmp_pts.<span class="built_in">size</span>(); i++)</span><br><span class="line">		&#123;</span><br><span class="line">		    cv::KeyPoint key;</span><br><span class="line">		    key.pt = tmp_pts[i];</span><br><span class="line">		    keypoints.<span class="built_in">push_back</span>(key);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">extractor</span>(image, keypoints, brief_descriptors);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)keypoints.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Eigen::Vector3d tmp_p;</span><br><span class="line">		m_camera-&gt;<span class="built_in">liftProjective</span>(Eigen::<span class="built_in">Vector2d</span>(keypoints[i].pt.x, keypoints[i].pt.y), tmp_p);</span><br><span class="line">		cv::KeyPoint tmp_norm;</span><br><span class="line">		tmp_norm.pt = cv::<span class="built_in">Point2f</span>(tmp_p.<span class="built_in">x</span>()/tmp_p.<span class="built_in">z</span>(), tmp_p.<span class="built_in">y</span>()/tmp_p.<span class="built_in">z</span>());</span><br><span class="line">		keypoints_norm.<span class="built_in">push_back</span>(tmp_norm);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>vins</tag>
        <tag>共视区</tag>
        <tag>特征点</tag>
        <tag>回环检测</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透ssh外网连接</title>
    <url>/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8Fssh%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>内网穿透，也即 NAT 穿透，进行 NAT 穿透是为了使具有某一个特定源 IP 地址和源端口号的数据包不被 NAT 设备屏蔽而正确路由到内网主机。比如在实验室中，服务器连接路由器，因此服务器的ip地址实际为路由器下的局域网地址，也就是内网，这个地址从路由器下以外的设备是无法访问的，因此需要使用内网穿透，让ssh能够从外网连接。</p>
<h2 id="花生壳内网穿透"><a href="#花生壳内网穿透" class="headerlink" title="花生壳内网穿透"></a>花生壳内网穿透</h2><p><strong>其他的或多或少都要花钱或者租云服务器</strong><br>花生壳可以有两条免费的内网穿透映射，还可以建立子账号获得更多的映射。  </p>
<ul>
<li>进入<a href="https://hsk.oray.com/">官网</a>，根据<a href="https://service.oray.com/question/11630.html">使用帮助</a>安装好，特别要注意安装好后不要立即关闭终端，需要使用终端里的SN码绑定账户</li>
<li>根据教程建立好映射后，网址难以记住，因此可以去阿里云上用自己的域名以CNAME方式解析一遍，这样只需要记住端口就行。</li>
</ul>
<h2 id="端口备份"><a href="#端口备份" class="headerlink" title="端口备份"></a>端口备份</h2><p>为了记住端口号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. yugrp01 55973 </span><br><span class="line">   ssh yugrp01@yugrp01.fengyunji.site -p 55973</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>宇树Go2机器狗高层控制命令仿真</title>
    <url>/%E5%AE%87%E6%A0%91Go2%E6%9C%BA%E5%99%A8%E7%8B%97%E9%AB%98%E5%B1%82%E6%8E%A7%E5%88%B6%E5%91%BD%E4%BB%A4%E4%BB%BF%E7%9C%9F/</url>
    <content><![CDATA[<h2 id="宇树Go2机器狗"><a href="#宇树Go2机器狗" class="headerlink" title="宇树Go2机器狗"></a>宇树Go2机器狗</h2><p>宇树(Unitree)Go2是一款高性能的四足机器人，是宇树科技推出的高级消费级和教育用机器狗产品，官方的仿真不支持高层控制命令，比如速度控制、指点控制等，仅支持关节控制。这里介绍如何在Gazebo中实现高层控制命令仿真。</p>
<h2 id="仿真环境"><a href="#仿真环境" class="headerlink" title="仿真环境"></a>仿真环境</h2><ul>
<li>Ubuntu 20.04</li>
<li>ROS Noetic</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>项目基于legged_control仓库搭建，引入宇树Go2机器狗的URDF模型，使用Gazebo仿真，使用MPC控制算法控制机器狗的运动。</p>
<ol>
<li><p>下载所有仓库，可用<a href="https://gh-proxy.com/github.com/%E6%9B%BF%E6%8D%A2https://github.com/">https://gh-proxy.com/github.com/替换https://github.com/</a></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p unitree_ws/src</span><br><span class="line"><span class="built_in">cd</span> unitree_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Feng1909/legged_control_go2.git</span><br><span class="line"><span class="comment"># 克隆OCS2</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/leggedrobotics/ocs2.git</span><br><span class="line"><span class="comment"># 克隆pinocchio</span></span><br><span class="line">git <span class="built_in">clone</span> --recurse-submodules https://github.com/leggedrobotics/pinocchio.git</span><br><span class="line"><span class="comment"># 克隆hpp-fcl</span></span><br><span class="line">git <span class="built_in">clone</span> --recurse-submodules https://github.com/leggedrobotics/hpp-fcl.git</span><br><span class="line"><span class="comment"># 克隆ocs2_robotic_assets</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/leggedrobotics/ocs2_robotic_assets.git</span><br><span class="line"><span class="comment"># Install dependencies</span></span><br><span class="line">sudo apt install liburdfdom-dev liboctomap-dev libassimp-dev</span><br></pre></td></tr></table></figure></li>
<li><p>编译工作空间</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catkin config -DCMAKE_BUILD_TYPE=RelWithDebInfo</span><br><span class="line">catkin build ocs2_legged_robot_ros ocs2_self_collision_visualization</span><br><span class="line">catkin build legged_controllers legged_unitree_description</span><br></pre></td></tr></table></figure></li>
<li><p>运行仿真</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定机器狗模型</span></span><br><span class="line"><span class="built_in">export</span> ROBOT_TYPE=go2</span><br><span class="line"><span class="comment"># 加载Gazebo模型</span></span><br><span class="line">roslaunch legged_unitree_description empty_world.launch</span><br></pre></td></tr></table></figure>
<p> 此时可以看到Gazebo中加载了Go2机器狗模型，但是没有控制命令，机器狗不会动。接下来需要加载控制命令。</p>
 <img src="sim.png" alt="go2_sim" style="zoom:50%;"   data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/></li>
<li><p>启动控制器</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roslaunch legged_controllers load_controller.launch cheater:=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p> 终端可以输入期望的步态</p>
 <img src="controller.png" alt="controller" style="zoom:50%;"   data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>
 可选的步态有：  
 * stance
 * trot
 * standing_trot
 * flying_trot
 * pace
 * standing_pace
 * dynamic_walk
 * static_walk
 * amble
 * lindyhop
 * skipping
 * pawup
 先输入`stance`，新起一个终端，有两种方法可以启动控制器
 1. 命令行启动
     <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosservice call /controller_manager/switch_controller <span class="string">&quot;start_controllers: [&#x27;controllers/legged_controller&#x27;]                   </span></span><br><span class="line"><span class="string">stop_controllers: [&#x27;&#x27;]</span></span><br><span class="line"><span class="string">strictness: 0</span></span><br><span class="line"><span class="string">start_asap: false</span></span><br><span class="line"><span class="string">timeout: 0.0&quot;</span></span><br></pre></td></tr></table></figure>
 2. 可视化界面启动
     <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ros-noetic-rqt-controller-manager</span><br><span class="line">rosrun rqt_controller_manager rqt_controller_manager</span><br></pre></td></tr></table></figure>
     选择`/controller_manager`，右键点击`controllers/legged_controller`，点击`Start`按钮，启动控制器。
     <img src="controller_manager.png" alt="controller_manager" style="zoom:50%;"   data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>
 3. 发布控制指令
     可使用/cmd_vel指定速度控制，但是需要将`stance`修改为移动状态的一种
 
 
<p> 当然，也可以使用<code>rqt</code>命令加载插件的方式将几个终端放在一起，需要<code>import</code>提前在<code>legged_control_go2</code>文件夹下设置好的<code>Default.perspective</code>文件</p>
<p> <video src="unitree_control.mp4" controls="controls" width="100%" height="100%"></video></p>
</li>
</ol>
]]></content>
      <categories>
        <category>具身智能</category>
      </categories>
      <tags>
        <tag>仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>对极几何</title>
    <url>/%E5%AF%B9%E6%9E%81%E5%87%A0%E4%BD%95/</url>
    <content><![CDATA[<h2 id="DUSt3R"><a href="#DUSt3R" class="headerlink" title="DUSt3R"></a>DUSt3R</h2><p>DUSt3R在描述相对位姿估计都时候提到</p>
<blockquote>
<p>One way is to perform 2D matching and recover intrinsics as described above, then estimate the Epipolar matrix and recover the relative pose</p>
</blockquote>
<p>相对位姿估计的一种方法是执行2D匹配并恢复如上所述的内部函数，然后估计极线矩阵并恢复相对姿态，另一种方法是直接比较点地图。当然，DUSt3R采用的是后者。</p>
<h2 id="对极几何"><a href="#对极几何" class="headerlink" title="对极几何"></a>对极几何</h2><p>考虑如下场景：<br><img src="/对极几何/对极几何.png"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>主要思想是：</p>
<ol>
<li>给定两张影像，获得对应的3D坐标点对。</li>
<li>先计算基础矩阵F，</li>
<li>然后结合相机内参矩阵K，恢复本质矩阵E。</li>
<li>对E进行SVD分解，得到R和t。</li>
</ol>
<h3 id="对极约束"><a href="#对极约束" class="headerlink" title="对极约束"></a>对极约束</h3><p>假设世界坐标系下点坐标为$P$，像素坐标系下点坐标为$p$，相机内参矩阵为$K$，相机外参矩阵为$R, t$，则有：<br>$$dp&#x3D;KP$$<br>其中$d$为齐次化矩阵，对于两个相机，有：<br>$$d_0p_0&#x3D;KP$$<br>$$d_1p_1&#x3D;KP$$<br>已知$R, t$，则有：<br>$$d_1p_1&#x3D;K(RP+t)$$<br>令$x&#x3D;K^{-1}p$，则有：<br>$$d_0x_0&#x3D;P$$<br>$$d_1x_1&#x3D;RP+t$$<br>即：<br>$$d_1x_1&#x3D;R(d_0x_0)+t$$<br>两边同时叉乘$t$，有：<br>$$t\times d_1x_1&#x3D;t\times R(d_0x_0)$$<br>$$t\times x_1&#x3D;t\times Rx_0$$<br>两边同时左乘$x^T_1$，有：<br>$$x^T_1t\times x_1&#x3D;x^T_1t\times Rx_0$$<br>得到：<br>$$0&#x3D;x^T_1t\times R^Tx_0$$</p>
<h3 id="本征矩阵"><a href="#本征矩阵" class="headerlink" title="本征矩阵"></a>本征矩阵</h3><p>由对极约束，本征矩阵$E$满足：<br>$$E&#x3D;t\times R$$<br>$$x^T_1Ex_0&#x3D;0$$<br>多组点可以求得$E$，然后对$E$进行SVD分解，得到$R, t$。</p>
<h3 id="基础矩阵"><a href="#基础矩阵" class="headerlink" title="基础矩阵"></a>基础矩阵</h3><p>基础矩阵$F$满足：<br>$$F&#x3D;K^{-T}EK^{-1}$$<br>是在本征矩阵基础上加入了相机内参矩阵的约束。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>通过对极几何可以恢复相机的相对姿态，但是无法恢复绝对姿态。</li>
</ol>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>SFM</tag>
      </tags>
  </entry>
  <entry>
    <title>斯坦福大学GibsonEnv环境搭建</title>
    <url>/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6GibsonEnv%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>为了在3DGS三维重建的时候获得更加真实的场景数据，摒弃Gazebo自建场景，这些场景只方便测试控制算法，对于感知数据的真实性难以保证。下面尝试Gibson环境，已尝试Matterport3D搭建失败。  </p>
<p>前置环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install libglew-dev libglm-dev libassimp-dev xorg-dev libglu1-mesa-dev libboost-dev \</span><br><span class="line">mesa-common-dev freeglut3-dev libopenmpi-dev cmake golang libjpeg-turbo8-dev wmctrl \</span><br><span class="line">xdotool libzmq3-dev zlib1g-dev</span><br></pre></td></tr></table></figure>
<h2 id="尝试python3-8"><a href="#尝试python3-8" class="headerlink" title="尝试python3.8"></a>尝试python3.8</h2><p>使用python3.8创建环境，为了后期适配ROS。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n gibsonenv python=3.8 anaconda</span><br><span class="line">conda activate gibsonenv</span><br></pre></td></tr></table></figure>
<p>为了对应CUDA 11.8，采用torch 2.0.0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install torch==2.0.0 torchvision==0.15.1 torchaudio==2.0.1 --index-url https://download.pytorch.org/whl/cu118</span><br></pre></td></tr></table></figure>
<p>安装tensorflow-gpu</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tensorflow-gpu==2.2.0</span><br></pre></td></tr></table></figure>
<p>克隆仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/StanfordVL/GibsonEnv.git</span><br><span class="line"><span class="built_in">cd</span> GibsonEnv</span><br><span class="line">./download.sh </span><br><span class="line">./build.sh build_local</span><br></pre></td></tr></table></figure>
<p>首先会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GibsonEnv/gibson/core/channels/external/glew.c:2774:1: error: unknown <span class="built_in">type</span> name ‘PFNGLCLEARDEPTHFOESPROC’; did you mean ‘PFNGLCLEARDEPTHFPROC’?</span><br><span class="line"> 2774 | PFNGLCLEARDEPTHFOESPROC __glewClearDepthfOES = NULL;</span><br><span class="line">      | ^~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">      | PFNGLCLEARDEPTHFPROC</span><br><span class="line">/home/adipandas/git_clones/GibsonEnv/gibson/core/channels/external/glew.c:2774:48: warning: initialization of ‘int’ from ‘void *’ makes <span class="built_in">integer</span> from pointer without a cast [-Wint-conversion]</span><br><span class="line"> 2774 | PFNGLCLEARDEPTHFOESPROC __glewClearDepthfOES = NULL;</span><br><span class="line">      |                                                ^~~~</span><br><span class="line">/home/adipandas/git_clones/GibsonEnv/gibson/core/channels/external/glew.c:2775:1: error: unknown <span class="built_in">type</span> name ‘PFNGLCLIPPLANEFOESPROC’; did you mean ‘PFNGLCLIPPLANEFPROC’?</span><br><span class="line"> 2775 | PFNGLCLIPPLANEFOESPROC __glewClipPlanefOES = NULL;</span><br><span class="line">      | ^~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">      | PFNGLCLIPPLANEFPROC</span><br><span class="line">/home/adipandas/git_clones/GibsonEnv/gibson/core/channels/external/glew.c:2775:46: warning: initialization of ‘int’ from ‘void *’ makes <span class="built_in">integer</span> from pointer without a cast [-Wint-conversion]</span><br><span class="line"> 2775 | PFNGLCLIPPLANEFOESPROC __glewClipPlanefOES = NULL;</span><br><span class="line">      |                                              ^~~~</span><br><span class="line">/home/adipandas/git_clones/GibsonEnv/gibson/core/channels/external/glew.c:2776:1: error: unknown <span class="built_in">type</span> name ‘PFNGLDEPTHRANGEFOESPROC’; did you mean ‘PFNGLDEPTHRANGEFPROC’?</span><br><span class="line"> 2776 | PFNGLDEPTHRANGEFOESPROC __glewDepthRangefOES = NULL;</span><br><span class="line">      | ^~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">      | PFNGLDEPTHRANGEFPROC</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>需要在<code>GibsonEnv/gibson/core/channels/external/glew.c</code>中把没有的全换成对应的，应将2774-2779行修改为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PFNGLCLEARDEPTHFPROC __glewClearDepthfOES = <span class="literal">NULL</span>;</span><br><span class="line">PFNGLCLIPPLANEFPROC __glewClipPlanefOES = <span class="literal">NULL</span>;</span><br><span class="line">PFNGLDEPTHRANGEFPROC __glewDepthRangefOES = <span class="literal">NULL</span>;</span><br><span class="line">PFNGLFRUSTUMFPROC __glewFrustumfOES = <span class="literal">NULL</span>;</span><br><span class="line">PFNGLGETCLIPPLANEFPROC __glewGetClipPlanefOES = <span class="literal">NULL</span>;</span><br><span class="line">PFNGLORTHOFPROC __glewOrthofOES = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<p>再次编译即可成功，随后安装python包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -e .</span><br></pre></td></tr></table></figure>
<p>首先报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lib/python3.10/site-packages/setuptools/_distutils/dist.py:268: UserWarning: Unknown distribution option: <span class="string">&#x27;tests_require&#x27;</span></span><br></pre></td></tr></table></figure>
<p>需要在<code>setup.py</code>中把<code>tests_require</code>改为:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#     tests_require=[],</span></span><br><span class="line">extras_require=&#123;</span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>: [<span class="string">&#x27;pytest&#x27;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>再次报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error: Multiple top-level packages discovered <span class="keyword">in</span> a flat-layout:</span><br></pre></td></tr></table></figure>
<p>在setup.py中添加：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setup(name=<span class="string">&#x27;gibson&#x27;</span>,</span><br><span class="line">    version=<span class="string">&#x27;0.3.1&#x27;</span>,</span><br><span class="line">    py_modules=[],</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>好的，现在让我们运行<code>python examples/demo/play_husky_nonviz.py</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure>
<p>至此，在Ubuntu 20.04上提高python、pytorch、tensorflow、CUDA版本安装的尝试宣告失败</p>
<h2 id="docker运行"><a href="#docker运行" class="headerlink" title="docker运行"></a>docker运行</h2><p>能用，但感觉不太好用</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>具身智能</tag>
      </tags>
  </entry>
  <entry>
    <title>无人机降落</title>
    <url>/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%99%8D%E8%90%BD/</url>
    <content><![CDATA[<h2 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a>任务目标</h2><p>无人机自主解锁，在完成飞行任务后进行自主降落</p>
<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>难以判断是否落地然后停桨</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li><p><strong>调用mavros的服务使其自动解锁</strong><br> <strong>注：千万不要自动offboard</strong>  </p>
<ul>
<li>通过<code>rosservice list</code>可以查阅到可调用的服务：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/mavros/cmd/arming</span><br><span class="line">/mavros/cmd/command</span><br><span class="line">/mavros/cmd/command_ack</span><br><span class="line">/mavros/cmd/command_int</span><br><span class="line">/mavros/cmd/land</span><br><span class="line">/mavros/cmd/set_home</span><br><span class="line">/mavros/cmd/takeoff</span><br><span class="line">/mavros/cmd/trigger_control</span><br><span class="line">/mavros/cmd/trigger_interval</span><br><span class="line">/mavros/cmd/vtol_transition</span><br><span class="line">/mavros/ftp/checksum</span><br><span class="line">/mavros/ftp/close</span><br><span class="line">/mavros/ftp/list</span><br><span class="line">/mavros/ftp/mkdir</span><br><span class="line">/mavros/ftp/open</span><br><span class="line">/mavros/ftp/read</span><br><span class="line">/mavros/ftp/remove</span><br><span class="line">/mavros/ftp/rename</span><br><span class="line">/mavros/ftp/reset</span><br><span class="line">/mavros/ftp/rmdir</span><br><span class="line">/mavros/ftp/truncate</span><br><span class="line">/mavros/ftp/write</span><br><span class="line">/mavros/geofence/clear</span><br><span class="line">/mavros/geofence/pull</span><br><span class="line">/mavros/geofence/push</span><br><span class="line">/mavros/get_loggers</span><br><span class="line">/mavros/home_position/req_update</span><br><span class="line">/mavros/mission/clear</span><br><span class="line">/mavros/mission/pull</span><br><span class="line">/mavros/mission/push</span><br><span class="line">/mavros/mission/set_current</span><br><span class="line">/mavros/param/get</span><br><span class="line">/mavros/param/pull</span><br><span class="line">/mavros/param/push</span><br><span class="line">/mavros/param/set</span><br><span class="line">/mavros/rallypoint/clear</span><br><span class="line">/mavros/rallypoint/pull</span><br><span class="line">/mavros/rallypoint/push</span><br><span class="line">/mavros/set_logger_level</span><br><span class="line">/mavros/set_message_interval</span><br><span class="line">/mavros/set_mode</span><br><span class="line">/mavros/set_stream_rate</span><br><span class="line">/mavros/setpoint_position/mav_frame</span><br><span class="line">/mavros/setpoint_trajectory/mav_frame</span><br><span class="line">/mavros/setpoint_trajectory/reset</span><br><span class="line">/mavros/setpoint_velocity/mav_frame</span><br><span class="line">/mavros/vehicle_info_get</span><br><span class="line">/rosout/get_loggers</span><br><span class="line">/rosout/set_logger_level</span><br></pre></td></tr></table></figure>
<ul>
<li>在这里调用<code>/mavros/cmd/arming</code>服务进行解锁<br>  Python代码为：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> mavros_msgs.srv <span class="keyword">import</span> SetMode, CommandBool, CommandBoolRequest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arm</span>():</span><br><span class="line">    rospy.init_node(<span class="string">&#x27;takeoff_node&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待连接</span></span><br><span class="line">    rospy.wait_for_service(<span class="string">&#x27;mavros/cmd/arming&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    arming_service = rospy.ServiceProxy(<span class="string">&#x27;mavros/cmd/arming&#x27;</span>, CommandBool)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解锁和解锁无人机</span></span><br><span class="line">    arm_command = CommandBoolRequest(value=<span class="literal">False</span>)</span><br><span class="line">    arming_service.call(arm_command)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        arm() </span><br><span class="line">    <span class="keyword">except</span> rospy.ROSInterruptException:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>调用mavros的服务使其自动降落</strong>  </p>
<ul>
<li>在这里调用<code>/mavros/set_mode</code>服务进行模式切换，可切换的模式有：  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> cmode_map px4_cmode_map&#123;&#123;</span><br><span class="line">&#123; px4::<span class="built_in">define_mode</span>(px4::custom_mode::MAIN_MODE_MANUAL),           <span class="string">&quot;MANUAL&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode</span>(px4::custom_mode::MAIN_MODE_ACRO),             <span class="string">&quot;ACRO&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode</span>(px4::custom_mode::MAIN_MODE_ALTCTL),           <span class="string">&quot;ALTCTL&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode</span>(px4::custom_mode::MAIN_MODE_POSCTL),           <span class="string">&quot;POSCTL&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode</span>(px4::custom_mode::MAIN_MODE_OFFBOARD),         <span class="string">&quot;OFFBOARD&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode</span>(px4::custom_mode::MAIN_MODE_STABILIZED),       <span class="string">&quot;STABILIZED&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode</span>(px4::custom_mode::MAIN_MODE_RATTITUDE),        <span class="string">&quot;RATTITUDE&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode_auto</span>(px4::custom_mode::SUB_MODE_AUTO_MISSION), <span class="string">&quot;AUTO.MISSION&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode_auto</span>(px4::custom_mode::SUB_MODE_AUTO_LOITER),  <span class="string">&quot;AUTO.LOITER&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode_auto</span>(px4::custom_mode::SUB_MODE_AUTO_RTL),     <span class="string">&quot;AUTO.RTL&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode_auto</span>(px4::custom_mode::SUB_MODE_AUTO_LAND),    <span class="string">&quot;AUTO.LAND&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode_auto</span>(px4::custom_mode::SUB_MODE_AUTO_RTGS),    <span class="string">&quot;AUTO.RTGS&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode_auto</span>(px4::custom_mode::SUB_MODE_AUTO_READY),   <span class="string">&quot;AUTO.READY&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode_auto</span>(px4::custom_mode::SUB_MODE_AUTO_TAKEOFF), <span class="string">&quot;AUTO.TAKEOFF&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode_auto</span>(px4::custom_mode::SUB_MODE_AUTO_FOLLOW_TARGET), <span class="string">&quot;AUTO.FOLLOW_TARGET&quot;</span> &#125;,</span><br><span class="line">&#123; px4::<span class="built_in">define_mode_auto</span>(px4::custom_mode::SUB_MODE_AUTO_PRECLAND), <span class="string">&quot;AUTO.PRECLAND&quot;</span> &#125;,&#125;&#125;;</span><br></pre></td></tr></table></figure></li>
<li>调用示例  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> mavros_msgs.srv <span class="keyword">import</span> CommandBool, CommandBoolRequest, SetMode, SetModeRequest</span><br><span class="line">set_mode_client = rospy.ServiceProxy(<span class="string">&quot;/mavros/set_mode&quot;</span>, SetMode)</span><br><span class="line">set_mode_client(<span class="number">0</span>,<span class="string">&#x27;AUTO.LAND&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p>附录：<code>mavros</code>的话题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/mavlink/from</span><br><span class="line">/mavlink/gcs_ip</span><br><span class="line">/mavlink/to</span><br><span class="line">/mavros/actuator_control</span><br><span class="line">/mavros/altitude</span><br><span class="line">/mavros/battery</span><br><span class="line">/mavros/estimator_status</span><br><span class="line">/mavros/extended_state</span><br><span class="line">/mavros/geofence/waypoints</span><br><span class="line">/mavros/global_position/compass_hdg</span><br><span class="line">/mavros/global_position/global</span><br><span class="line">/mavros/global_position/gp_lp_offset</span><br><span class="line">/mavros/global_position/gp_origin</span><br><span class="line">/mavros/global_position/local</span><br><span class="line">/mavros/global_position/raw/fix</span><br><span class="line">/mavros/global_position/raw/gps_vel</span><br><span class="line">/mavros/global_position/raw/satellites</span><br><span class="line">/mavros/global_position/rel_alt</span><br><span class="line">/mavros/global_position/set_gp_origin</span><br><span class="line">/mavros/hil/actuator_controls</span><br><span class="line">/mavros/hil/controls</span><br><span class="line">/mavros/hil/gps</span><br><span class="line">/mavros/hil/imu_ned</span><br><span class="line">/mavros/hil/optical_flow</span><br><span class="line">/mavros/hil/rc_inputs</span><br><span class="line">/mavros/hil/state</span><br><span class="line">/mavros/home_position/home</span><br><span class="line">/mavros/home_position/set</span><br><span class="line">/mavros/imu/data</span><br><span class="line">/mavros/imu/data_raw</span><br><span class="line">/mavros/imu/diff_pressure</span><br><span class="line">/mavros/imu/mag</span><br><span class="line">/mavros/imu/static_pressure</span><br><span class="line">/mavros/imu/temperature_baro</span><br><span class="line">/mavros/imu/temperature_imu</span><br><span class="line">/mavros/local_position/accel</span><br><span class="line">/mavros/local_position/odom</span><br><span class="line">/mavros/local_position/pose</span><br><span class="line">/mavros/local_position/pose_cov</span><br><span class="line">/mavros/local_position/velocity_body</span><br><span class="line">/mavros/local_position/velocity_body_cov</span><br><span class="line">/mavros/local_position/velocity_local</span><br><span class="line">/mavros/manual_control/control</span><br><span class="line">/mavros/manual_control/send</span><br><span class="line">/mavros/mission/reached</span><br><span class="line">/mavros/mission/waypoints</span><br><span class="line">/mavros/nav_controller_output</span><br><span class="line">/mavros/param/param_value</span><br><span class="line">/mavros/radio_status</span><br><span class="line">/mavros/rallypoint/waypoints</span><br><span class="line">/mavros/rc/in</span><br><span class="line">/mavros/rc/out</span><br><span class="line">/mavros/rc/override</span><br><span class="line">/mavros/setpoint_accel/accel</span><br><span class="line">/mavros/setpoint_attitude/cmd_vel</span><br><span class="line">/mavros/setpoint_attitude/thrust</span><br><span class="line">/mavros/setpoint_position/global</span><br><span class="line">/mavros/setpoint_position/global_to_local</span><br><span class="line">/mavros/setpoint_position/local</span><br><span class="line">/mavros/setpoint_raw/attitude</span><br><span class="line">/mavros/setpoint_raw/global</span><br><span class="line">/mavros/setpoint_raw/local</span><br><span class="line">/mavros/setpoint_raw/target_attitude</span><br><span class="line">/mavros/setpoint_raw/target_global</span><br><span class="line">/mavros/setpoint_raw/target_local</span><br><span class="line">/mavros/setpoint_trajectory/desired</span><br><span class="line">/mavros/setpoint_trajectory/local</span><br><span class="line">/mavros/setpoint_velocity/cmd_vel</span><br><span class="line">/mavros/setpoint_velocity/cmd_vel_unstamped</span><br><span class="line">/mavros/state</span><br><span class="line">/mavros/statustext/recv</span><br><span class="line">/mavros/statustext/send</span><br><span class="line">/mavros/sys_status</span><br><span class="line">/mavros/target_actuator_control</span><br><span class="line">/mavros/time_reference</span><br><span class="line">/mavros/timesync_status</span><br><span class="line">/mavros/vfr_hud</span><br><span class="line">/mavros/wind_estimation</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>无人机</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>MPC</tag>
        <tag>PX4</tag>
      </tags>
  </entry>
  <entry>
    <title>训练DUSt3R模型</title>
    <url>/%E8%AE%AD%E7%BB%83DUSt3R%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>DUSt3R的介绍可参考本博客<a href="https://blog.fengyunji.site/Dust3r/">DUSt3R模型》</a></p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>根据<a href="https://github.com/naver/dust3r">DUSt3R的github</a>的说明，安装依赖</p>
<h2 id="下载数据集"><a href="#下载数据集" class="headerlink" title="下载数据集"></a>下载数据集</h2><p>数据集分为很多个，需要分别下载</p>
<h3 id="CO3D数据集"><a href="#CO3D数据集" class="headerlink" title="CO3D数据集"></a>CO3D数据集</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p data/co3d_subset</span><br><span class="line"><span class="built_in">cd</span> data/co3d_subset</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/facebookresearch/co3d</span><br><span class="line"><span class="built_in">cd</span> co3d</span><br><span class="line">python3 ./co3d/download_dataset.py --download_folder ../ --single_sequence_subset</span><br><span class="line"><span class="built_in">rm</span> ../*.zip</span><br><span class="line"><span class="built_in">cd</span> ../../..</span><br><span class="line"></span><br><span class="line">python3 datasets_preprocess/preprocess_co3d.py --co3d_dir data/co3d_subset --output_dir data/co3d_subset_processed  --single_sequence_subset</span><br></pre></td></tr></table></figure>

<h3 id="ARKitScenes数据集"><a href="#ARKitScenes数据集" class="headerlink" title="ARKitScenes数据集"></a>ARKitScenes数据集</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> data/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/apple/ARKitScenes.git</span><br><span class="line">python3 download_data.py raw --video_id_csv raw/raw_train_val_splits.csv --download_dir arkit_data/ --raw_dataset_assets lowres_depth vga_wide vga_wide_intrinsics lowres_wide.traj</span><br></pre></td></tr></table></figure>
<p>主要需要提前安装<code>zip</code>和<code>unzip</code>，否则会报错</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>DUSt3R</tag>
        <tag>具身智能</tag>
        <tag>MASt3R</tag>
      </tags>
  </entry>
  <entry>
    <title>遗传算法求点的分布问题</title>
    <url>/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E7%82%B9%E7%9A%84%E5%88%86%E5%B8%83%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/img/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E7%82%B9%E7%9A%84%E5%88%86%E5%B8%83/1.jpeg" alt="在这里插入图片描述"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p><strong>即：</strong> N个点相互直接的距离要尽可能大，且每一个点距离自身最近点的距离的差值需要尽可能小</p>
<h3 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h3><p>对于方形域，使用笛卡尔坐标系，对于圆形域，使用极坐标系，对于球域，使用球坐标系，方便GA工具箱进行优化</p>
<h4 id="编码方法："><a href="#编码方法：" class="headerlink" title="编码方法："></a>编码方法：</h4><p>将<code>x</code> ，<code>y</code> 或<code>r</code>，<code>theta</code> 或<code>r</code>，<code>phi</code>，<code>theta</code> 按顺序排列，每一条遗传链均由多个点的坐标顺序排列而成，并使用相同的方法进行解码，分别计算每个点距离最近点的距离，并相加，得到N个点距离最近点的距离之和，另外，计算该距离的平均值，并求出方差和，以权重系数<code>bias_2</code>相乘加入返回结果中，根据多次实验，<code>bias_2=0.3 bias_1=0.7</code> 时可以满足题目条件，因此，通过GA工具箱进行不断求解，下面展示部分结果，不同数目的点仅需更改<code>Num</code>值即可。</p>
<h3 id="部分效果："><a href="#部分效果：" class="headerlink" title="部分效果："></a>部分效果：</h3><p><img src="/img/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E7%82%B9%E7%9A%84%E5%88%86%E5%B8%83/2.png" alt="在这里插入图片描述"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/img/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E7%82%B9%E7%9A%84%E5%88%86%E5%B8%83/3.png" alt="在这里插入图片描述"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><img src="/img/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E7%82%B9%E7%9A%84%E5%88%86%E5%B8%83/4.png" alt="在这里插入图片描述"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br><strong>注：</strong> 三维图在二维中不便观察，但是通过多视角拖动，此六点均在圆三个轴的六个顶点处，符合题目要求。</p>
<h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><p>GA工具箱的使用方法可以参考上一篇文章，只需要更改函数名、变量数量、upper_bound即可</p>
<h3 id="方形："><a href="#方形：" class="headerlink" title="方形："></a>方形：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function result = allocate(a)</span><br><span class="line">    Num = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    bias_1 = <span class="number">0.7</span>;</span><br><span class="line">    bias_2 = <span class="number">1</span> - bias_1;</span><br><span class="line">    x = [];</span><br><span class="line">    y = [];</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        x(i) = a(i*<span class="number">2</span>-<span class="number">1</span>);</span><br><span class="line">        y(i) = a(i*<span class="number">2</span>);</span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        <span class="built_in">min</span> = <span class="number">9999</span>;</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span>:Num</span><br><span class="line">            <span class="keyword">if</span> i == j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            end</span><br><span class="line">            dis = sqrt(power((x(i)-x(j)), <span class="number">2</span>)+power((y(i)-y(j)), <span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">min</span> &gt; dis</span><br><span class="line">                <span class="built_in">min</span> = dis;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">min</span> ~= <span class="number">9999</span></span><br><span class="line">            <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="built_in">min</span>;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    mid = <span class="built_in">sum</span>/Num;</span><br><span class="line">    adjust = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        <span class="built_in">min</span> = <span class="number">9999</span>;</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span>:Num</span><br><span class="line">            <span class="keyword">if</span> i == j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            end</span><br><span class="line">            dis = sqrt(power((x(i)-x(j)), <span class="number">2</span>)+power((y(i)-y(j)), <span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">min</span> &gt; dis</span><br><span class="line">                <span class="built_in">min</span> = dis;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">min</span> ~= <span class="number">9999</span></span><br><span class="line">            adjust = adjust + bias_2*<span class="built_in">abs</span>(<span class="built_in">min</span> - mid);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">sum</span>*bias_1;</span><br><span class="line">    adjust;</span><br><span class="line">    result = -bias_1*<span class="built_in">sum</span> + adjust;</span><br><span class="line">    %x_1 = a(<span class="number">1</span>);</span><br><span class="line">    %y = a(<span class="number">2</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="方形可视化："><a href="#方形可视化：" class="headerlink" title="方形可视化："></a>方形可视化：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function plots(a)</span><br><span class="line">    Num = <span class="number">9</span>;</span><br><span class="line">    x = [];</span><br><span class="line">    y = [];</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        x(i) = a(i*<span class="number">2</span>-<span class="number">1</span>);</span><br><span class="line">        y(i) = a(i*<span class="number">2</span>);</span><br><span class="line">    end</span><br><span class="line">    % plot(x(<span class="number">1</span>),y(<span class="number">1</span>), <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        plot(x(i), y(i), <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        [x(i),y(i)]</span><br><span class="line">        hold on;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function result = allocate_circle(a)</span><br><span class="line">    Num = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    bias_1 = <span class="number">0.7</span>;</span><br><span class="line">    bias_2 = <span class="number">1</span> - bias_1;</span><br><span class="line">    % x为r，y为theta</span><br><span class="line">    x = [];</span><br><span class="line">    y = [];</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        x(i) = a(i*<span class="number">2</span>-<span class="number">1</span>);</span><br><span class="line">        y(i) = a(i*<span class="number">2</span>);</span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        <span class="built_in">min</span> = <span class="number">9999</span>;</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span>:Num</span><br><span class="line">            <span class="keyword">if</span> i == j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            end</span><br><span class="line">            x_1 = x(i)*cos(y(i));</span><br><span class="line">            y_1 = x(i)*sin(y(i));</span><br><span class="line">            x_2 = x(j)*cos(y(j));</span><br><span class="line">            y_2 = x(j)*sin(y(j));</span><br><span class="line">            % dis = sqrt(power((x(i)-x(j)), <span class="number">2</span>)+power((y(i)-y(j)), <span class="number">2</span>));</span><br><span class="line">            dis = sqrt(power(x_1-x_2, <span class="number">2</span>)+power(y_1-y_2, <span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">min</span> &gt; dis</span><br><span class="line">                <span class="built_in">min</span> = dis;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">min</span> ~= <span class="number">9999</span></span><br><span class="line">            <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="built_in">min</span>;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    mid = <span class="built_in">sum</span>/Num;</span><br><span class="line">    adjust = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        <span class="built_in">min</span> = <span class="number">9999</span>;</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span>:Num</span><br><span class="line">            <span class="keyword">if</span> i == j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            end</span><br><span class="line">            x_1 = x(i)*cos(y(i));</span><br><span class="line">            y_1 = x(i)*sin(y(i));</span><br><span class="line">            x_2 = x(j)*cos(y(j));</span><br><span class="line">            y_2 = x(j)*sin(y(j));</span><br><span class="line">            % dis = sqrt(power((x(i)-x(j)), <span class="number">2</span>)+power((y(i)-y(j)), <span class="number">2</span>));</span><br><span class="line">            dis = sqrt(power(x_1-x_2, <span class="number">2</span>)+power(y_1-y_2, <span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">min</span> &gt; dis</span><br><span class="line">                <span class="built_in">min</span> = dis;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">min</span> ~= <span class="number">9999</span></span><br><span class="line">            adjust = adjust + bias_2*<span class="built_in">abs</span>(<span class="built_in">min</span> - mid);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">sum</span>*bias_1;</span><br><span class="line">    adjust;</span><br><span class="line">    result = -bias_1*<span class="built_in">sum</span> + adjust;</span><br><span class="line">    %x_1 = a(<span class="number">1</span>);</span><br><span class="line">    %y = a(<span class="number">2</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="圆形可视化"><a href="#圆形可视化" class="headerlink" title="圆形可视化"></a>圆形可视化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function plots_circle(a)</span><br><span class="line">    Num = <span class="number">8</span>;</span><br><span class="line">    x = [];</span><br><span class="line">    y = [];</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        x(i) = a(i*<span class="number">2</span>-<span class="number">1</span>);</span><br><span class="line">        y(i) = a(i*<span class="number">2</span>);</span><br><span class="line">    end</span><br><span class="line">    % plot(x(<span class="number">1</span>),y(<span class="number">1</span>), <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        plot(x(i)*cos(y(i)), x(i)*sin(y(i)), <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        [x(i),y(i)]</span><br><span class="line">        hold on;</span><br><span class="line">    end</span><br><span class="line">    theta=<span class="number">0</span>:<span class="number">2</span>*pi/<span class="number">3600</span>:<span class="number">2</span>*pi;</span><br><span class="line">    r = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Circle1=<span class="number">0</span>+r*cos(theta);</span><br><span class="line"></span><br><span class="line">    Circle2=<span class="number">0</span>+r*sin(theta);</span><br><span class="line"></span><br><span class="line">    plot(Circle1,Circle2,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;Linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="球"><a href="#球" class="headerlink" title="球"></a>球</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function result = allocate_qiu(a)</span><br><span class="line">    Num = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    bias_1 = <span class="number">0.7</span>;</span><br><span class="line">    bias_2 = <span class="number">1</span> - bias_1;</span><br><span class="line">    % x为r，y为theta，z为phi</span><br><span class="line">    x = [];</span><br><span class="line">    y = [];</span><br><span class="line">    z = [];</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        x(i) = a(i*<span class="number">3</span>-<span class="number">2</span>);</span><br><span class="line">        y(i) = a(i*<span class="number">3</span>-<span class="number">1</span>);</span><br><span class="line">        z(i) = a(i*<span class="number">3</span>);</span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        <span class="built_in">min</span> = <span class="number">9999</span>;</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span>:Num</span><br><span class="line">            <span class="keyword">if</span> i == j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            end</span><br><span class="line">            x_1 = x(i)*cos(z(i))*cos(y(i));</span><br><span class="line">            y_1 = x(i)*cos(z(i))*sin(y(i));</span><br><span class="line">            z_1 = x(i)*sin(z(i));</span><br><span class="line">            x_2 = x(j)*cos(z(j))*cos(y(j));</span><br><span class="line">            y_2 = x(j)*cos(z(j))*sin(y(j));</span><br><span class="line">            z_2 = x(j)*sin(z(j));</span><br><span class="line">            % dis = sqrt(power((x(i)-x(j)), <span class="number">2</span>)+power((y(i)-y(j)), <span class="number">2</span>));</span><br><span class="line">            % dis = sqrt(power(x_1-x_2, <span class="number">2</span>)+power(y_1-y_2, <span class="number">2</span>));</span><br><span class="line">            dis = power(power(x_1-x_2,<span class="number">2</span>)+power(y_1-y_2,<span class="number">2</span>)+power(z_1-z_2,<span class="number">2</span>),<span class="number">1</span>/<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">min</span> &gt; dis</span><br><span class="line">                <span class="built_in">min</span> = dis;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">min</span> ~= <span class="number">9999</span></span><br><span class="line">            <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="built_in">min</span>;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    mid = <span class="built_in">sum</span>/Num;</span><br><span class="line">    adjust = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        <span class="built_in">min</span> = <span class="number">9999</span>;</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span>:Num</span><br><span class="line">            <span class="keyword">if</span> i == j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            end</span><br><span class="line">            x_1 = x(i)*cos(z(i))*cos(y(i));</span><br><span class="line">            y_1 = x(i)*cos(z(i))*sin(y(i));</span><br><span class="line">            z_1 = x(i)*sin(z(i));</span><br><span class="line">            x_2 = x(j)*cos(z(j))*cos(y(j));</span><br><span class="line">            y_2 = x(j)*cos(z(j))*sin(y(j));</span><br><span class="line">            z_2 = x(j)*sin(z(j));</span><br><span class="line">            % dis = sqrt(power((x(i)-x(j)), <span class="number">2</span>)+power((y(i)-y(j)), <span class="number">2</span>));</span><br><span class="line">            % dis = sqrt(power(x_1-x_2, <span class="number">2</span>)+power(y_1-y_2, <span class="number">2</span>));</span><br><span class="line">            dis = power(power(x_1-x_2,<span class="number">2</span>)+power(y_1-y_2,<span class="number">2</span>)+power(z_1-z_2,<span class="number">2</span>),<span class="number">1</span>/<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">min</span> &gt; dis</span><br><span class="line">                <span class="built_in">min</span> = dis;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">min</span> ~= <span class="number">9999</span></span><br><span class="line">            adjust = adjust + bias_2*<span class="built_in">abs</span>(<span class="built_in">min</span> - mid);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">sum</span>*bias_1;</span><br><span class="line">    adjust;</span><br><span class="line">    result = -bias_1*<span class="built_in">sum</span> + adjust;</span><br><span class="line">    %x_1 = a(<span class="number">1</span>);</span><br><span class="line">    %y = a(<span class="number">2</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="球可视化"><a href="#球可视化" class="headerlink" title="球可视化"></a>球可视化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function plots_qiu(a)</span><br><span class="line">    Num = <span class="number">6</span>;</span><br><span class="line">    x = [];</span><br><span class="line">    y = [];</span><br><span class="line">    z = [];</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        x(i) = a(i*<span class="number">3</span>-<span class="number">2</span>);</span><br><span class="line">        y(i) = a(i*<span class="number">3</span>-<span class="number">1</span>);</span><br><span class="line">        z(i) = a(i*<span class="number">3</span>);</span><br><span class="line">    end</span><br><span class="line">    % plot(x(<span class="number">1</span>),y(<span class="number">1</span>), <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>:Num</span><br><span class="line">        % plot(x(i)*cos(z(i))*cos(y(i)), x(i)*cos(z(i))*sin(y(i)), <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        scatter3(x(i)*cos(z(i))*cos(y(i)),x(i)*cos(z(i))*sin(y(i)),x(i)*sin(z(i)),<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">        [x(i)*cos(z(i))*cos(y(i)),x(i)*cos(z(i))*sin(y(i))];</span><br><span class="line">        hold on;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>智能算法</category>
      </categories>
      <tags>
        <tag>遗传算法</tag>
        <tag>MatLab</tag>
      </tags>
  </entry>
  <entry>
    <title>问题记录</title>
    <url>/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="Gaussian-Splatting使用流程"><a href="#Gaussian-Splatting使用流程" class="headerlink" title="Gaussian Splatting使用流程"></a>Gaussian Splatting使用流程</h2><ul>
<li>最多10000张图   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/dataset/input</span><br><span class="line">ffmpeg -i test.mp4 -qscale:v 1 -qmin 1 -vf fps=10 ~/dataset/input/%04d.jpg</span><br></pre></td></tr></table></figure></li>
<li>colmap  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python convert.py -s ~/dataset/</span><br></pre></td></tr></table></figure></li>
<li>训练  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python train.py -s ~/dataset/ --iterations 7000 --test_iterations -1</span><br></pre></td></tr></table></figure></li>
<li>可视化  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> gaussian_splatting</span><br><span class="line">./SIBR_viewers/install/bin/SIBR_gaussianViewer_app --appPath ./SIBR_viewers/install/shaders/core/ -m output/5e31c936-7/</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="编译colmap问题"><a href="#编译colmap问题" class="headerlink" title="编译colmap问题"></a>编译colmap问题</h2><p><a href="https://blog.csdn.net/qq_30565883/article/details/133778529">https://blog.csdn.net/qq_30565883/article/details/133778529</a></p>
<h2 id="gaussian-splatting使用流程"><a href="#gaussian-splatting使用流程" class="headerlink" title="gaussian splatting使用流程"></a>gaussian splatting使用流程</h2><p><a href="https://zhuanlan.zhihu.com/p/688397422">https://zhuanlan.zhihu.com/p/688397422</a><br>记得source一下embree</p>
<h2 id="vs-code使用markdown编写，导出pdf"><a href="#vs-code使用markdown编写，导出pdf" class="headerlink" title="vs code使用markdown编写，导出pdf"></a>vs code使用markdown编写，导出pdf</h2><ul>
<li>安装扩展：markdown-pdf</li>
<li>在<code>C://Users/&lt;username&gt;/.vscode/extensions/yzane.markdown-pdf-1.4.1/template/template.html</code>中最后一行添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config(&#123; tex2jax: &#123;inlineMath: [[&#x27;$&#x27;, &#x27;$&#x27;]]&#125;, messageStyle: &quot;none&quot; &#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li>在markdown中右键选择<code>Markdown PDF: Export (pdf)</code>即可导出pdf</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>魔方还原</title>
    <url>/%E9%AD%94%E6%96%B9%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<h1 id="建立搜索算法完成从任意初始状态向目标状态的操作转换"><a href="#建立搜索算法完成从任意初始状态向目标状态的操作转换" class="headerlink" title="建立搜索算法完成从任意初始状态向目标状态的操作转换"></a>建立搜索算法完成从任意初始状态向目标状态的操作转换</h1><p>二阶魔方示意图如下：<br><img src="/img/%E9%AD%94%E6%96%B9/1.jpeg" alt="二阶魔方示意图"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h2><p>将二阶魔方展开如下图<br><img src="/img/%E9%AD%94%E6%96%B9/2.png" alt="在这里插入图片描述"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>其中$l_1, l_2, …, l_{12}$均为二维矩阵，代表所在行的两个方块颜色。<br>我们使用1至6代表六种不同的颜色，则还原后的展开图表达式为：</p>
<p>$[[l_1, l_2], [l_3, l_4], …, [l_{11}, l_{12}]] &#x3D;  [[1 1,1 1],[2 2,22],…, [66,66]]$</p>
<h2 id="操作定义"><a href="#操作定义" class="headerlink" title="操作定义"></a>操作定义</h2><p>我们定义6种操作方法，可以完成魔方的任意自由度地旋转，具有空间完备性，其实3种操作足以还原魔方，但是可能结果不是最优解，也可以定义12种操作方式，但是这12种操作方式包含了6种冗余操作，除了增加编程难度以外没有任何好处</p>
<p><em>下面展示这六种操作：</em></p>
<p><img src="/img/%E9%AD%94%E6%96%B9/3.png" alt="在这里插入图片描述"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>涉及算法：</p>
<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><p>广度优先搜索，又称宽搜，信竞基础，不多介绍</p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>函数自己调用自己，信竞基础，不多介绍</p>
<h2 id="好了，可以愉快敲代码了"><a href="#好了，可以愉快敲代码了" class="headerlink" title="好了，可以愉快敲代码了"></a>好了，可以愉快敲代码了</h2><p>代码很简单，但是贼难敲，且费脑细胞</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">***********************</span></span><br><span class="line"><span class="comment">**  Author:Feng1909  **</span></span><br><span class="line"><span class="comment">***********************</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体，存储魔方每一个状态以及在对应状态时刻之前的操作</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">magic_cube</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">13</span>][<span class="number">3</span>];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; steps;</span><br><span class="line">&#125;init;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于BFS算法，普通BFS算法使用队列实现</span></span><br><span class="line">queue&lt;magic_cube&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否复原</span></span><br><span class="line"><span class="type">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取输入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input_cube</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;input cube: &quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">12</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">2</span>; j++)</span><br><span class="line">            cin&gt;&gt;init.a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力检测是否复原</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_back</span><span class="params">(magic_cube t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t.a[<span class="number">1</span>][<span class="number">1</span>] == t.a[<span class="number">1</span>][<span class="number">2</span>] &amp;&amp; t.a[<span class="number">1</span>][<span class="number">1</span>] == t.a[<span class="number">2</span>][<span class="number">1</span>] &amp;&amp; t.a[<span class="number">1</span>][<span class="number">1</span>] == t.a[<span class="number">2</span>][<span class="number">2</span>] &amp;&amp;</span><br><span class="line">        t.a[<span class="number">3</span>][<span class="number">1</span>] == t.a[<span class="number">3</span>][<span class="number">2</span>] &amp;&amp; t.a[<span class="number">3</span>][<span class="number">1</span>] == t.a[<span class="number">4</span>][<span class="number">1</span>] &amp;&amp; t.a[<span class="number">3</span>][<span class="number">1</span>] == t.a[<span class="number">4</span>][<span class="number">2</span>] &amp;&amp;</span><br><span class="line">        t.a[<span class="number">5</span>][<span class="number">1</span>] == t.a[<span class="number">5</span>][<span class="number">2</span>] &amp;&amp; t.a[<span class="number">5</span>][<span class="number">1</span>] == t.a[<span class="number">6</span>][<span class="number">1</span>] &amp;&amp; t.a[<span class="number">5</span>][<span class="number">1</span>] == t.a[<span class="number">6</span>][<span class="number">2</span>] &amp;&amp;</span><br><span class="line">        t.a[<span class="number">7</span>][<span class="number">1</span>] == t.a[<span class="number">7</span>][<span class="number">2</span>] &amp;&amp; t.a[<span class="number">7</span>][<span class="number">1</span>] == t.a[<span class="number">8</span>][<span class="number">1</span>] &amp;&amp; t.a[<span class="number">7</span>][<span class="number">1</span>] == t.a[<span class="number">8</span>][<span class="number">2</span>] &amp;&amp;</span><br><span class="line">        t.a[<span class="number">9</span>][<span class="number">1</span>] == t.a[<span class="number">9</span>][<span class="number">2</span>] &amp;&amp; t.a[<span class="number">9</span>][<span class="number">1</span>] == t.a[<span class="number">10</span>][<span class="number">1</span>] &amp;&amp; t.a[<span class="number">9</span>][<span class="number">1</span>] == t.a[<span class="number">10</span>][<span class="number">2</span>] &amp;&amp;</span><br><span class="line">        t.a[<span class="number">11</span>][<span class="number">1</span>] == t.a[<span class="number">11</span>][<span class="number">2</span>] &amp;&amp; t.a[<span class="number">11</span>][<span class="number">1</span>] == t.a[<span class="number">12</span>][<span class="number">1</span>] &amp;&amp; t.a[<span class="number">11</span>][<span class="number">1</span>] == t.a[<span class="number">12</span>][<span class="number">2</span>])</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应操作1</span></span><br><span class="line"><span class="comment">// 特别烧脑，脑细胞毁灭者</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">act_1</span><span class="params">(magic_cube t)</span> </span>&#123;</span><br><span class="line">    magic_cube tmp;</span><br><span class="line">    tmp = t;</span><br><span class="line">    tmp.a[<span class="number">5</span>][<span class="number">1</span>] = t.a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">6</span>][<span class="number">1</span>] = t.a[<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">1</span>][<span class="number">1</span>] = t.a[<span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">2</span>][<span class="number">1</span>] = t.a[<span class="number">9</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">11</span>][<span class="number">1</span>] = t.a[<span class="number">5</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">12</span>][<span class="number">1</span>] = t.a[<span class="number">6</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">10</span>][<span class="number">2</span>] = t.a[<span class="number">11</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">9</span>][<span class="number">2</span>] = t.a[<span class="number">12</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">3</span>][<span class="number">1</span>] = t.a[<span class="number">4</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">3</span>][<span class="number">2</span>] = t.a[<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">4</span>][<span class="number">1</span>] = t.a[<span class="number">4</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">4</span>][<span class="number">2</span>] = t.a[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.steps.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">is_back</span>(tmp)) &#123;</span><br><span class="line">    	flag = <span class="number">1</span>;</span><br><span class="line">        cout&lt;&lt;tmp.steps.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">while</span> (!tmp.steps.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        	cout&lt;&lt;tmp.steps.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">        	tmp.steps.<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    q.<span class="built_in">push</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应操作2</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">act_2</span><span class="params">(magic_cube t)</span> </span>&#123;</span><br><span class="line">    magic_cube tmp;</span><br><span class="line">    tmp = t;</span><br><span class="line">    tmp.a[<span class="number">5</span>][<span class="number">2</span>] = t.a[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">6</span>][<span class="number">2</span>] = t.a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">1</span>][<span class="number">2</span>] = t.a[<span class="number">10</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">2</span>][<span class="number">2</span>] = t.a[<span class="number">9</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">11</span>][<span class="number">2</span>] = t.a[<span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">12</span>][<span class="number">2</span>] = t.a[<span class="number">6</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">10</span>][<span class="number">1</span>] = t.a[<span class="number">11</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">9</span>][<span class="number">1</span>] = t.a[<span class="number">12</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    tmp.a[<span class="number">7</span>][<span class="number">1</span>] = t.a[<span class="number">7</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">7</span>][<span class="number">2</span>] = t.a[<span class="number">8</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">8</span>][<span class="number">1</span>] = t.a[<span class="number">7</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">8</span>][<span class="number">2</span>] = t.a[<span class="number">8</span>][<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    tmp.steps.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">is_back</span>(tmp)) &#123;</span><br><span class="line">    	flag = <span class="number">1</span>;</span><br><span class="line">        cout&lt;&lt;tmp.steps.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">while</span> (!tmp.steps.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        	cout&lt;&lt;tmp.steps.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">        	tmp.steps.<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    q.<span class="built_in">push</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应操作3</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">act_3</span><span class="params">(magic_cube t)</span> </span>&#123;</span><br><span class="line">    magic_cube tmp;</span><br><span class="line">    tmp = t;</span><br><span class="line">    tmp.a[<span class="number">2</span>][<span class="number">1</span>] = t.a[<span class="number">4</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">2</span>][<span class="number">2</span>] = t.a[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">3</span>][<span class="number">2</span>] = t.a[<span class="number">11</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">4</span>][<span class="number">2</span>] = t.a[<span class="number">11</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">11</span>][<span class="number">1</span>] = t.a[<span class="number">8</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">11</span>][<span class="number">2</span>] = t.a[<span class="number">7</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">8</span>][<span class="number">1</span>] = t.a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">7</span>][<span class="number">1</span>] = t.a[<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    tmp.a[<span class="number">5</span>][<span class="number">2</span>] = tmp.a[<span class="number">5</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">5</span>][<span class="number">1</span>] = tmp.a[<span class="number">6</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">6</span>][<span class="number">1</span>] = tmp.a[<span class="number">6</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">6</span>][<span class="number">2</span>] = tmp.a[<span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    tmp.steps.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">is_back</span>(tmp)) &#123;</span><br><span class="line">    	flag = <span class="number">1</span>;</span><br><span class="line">        cout&lt;&lt;tmp.steps.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">while</span> (!tmp.steps.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        	cout&lt;&lt;tmp.steps.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">        	tmp.steps.<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    q.<span class="built_in">push</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应操作4</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">act_4</span><span class="params">(magic_cube t)</span> </span>&#123;</span><br><span class="line">    magic_cube tmp;</span><br><span class="line">    tmp = t;</span><br><span class="line">    tmp.a[<span class="number">1</span>][<span class="number">1</span>] = t.a[<span class="number">4</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">1</span>][<span class="number">2</span>] = t.a[<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">3</span>][<span class="number">1</span>] = t.a[<span class="number">12</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">4</span>][<span class="number">1</span>] = t.a[<span class="number">12</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">12</span>][<span class="number">1</span>] = t.a[<span class="number">8</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">12</span>][<span class="number">2</span>] = t.a[<span class="number">7</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">8</span>][<span class="number">2</span>] = t.a[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">7</span>][<span class="number">2</span>] = t.a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    tmp.a[<span class="number">9</span>][<span class="number">1</span>] = tmp.a[<span class="number">9</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">9</span>][<span class="number">2</span>] = tmp.a[<span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">10</span>][<span class="number">2</span>] = tmp.a[<span class="number">10</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">10</span>][<span class="number">1</span>] = tmp.a[<span class="number">9</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    tmp.steps.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">is_back</span>(tmp)) &#123;</span><br><span class="line">    	flag = <span class="number">1</span>;</span><br><span class="line">        cout&lt;&lt;tmp.steps.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">while</span> (!tmp.steps.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        	cout&lt;&lt;tmp.steps.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">        	tmp.steps.<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    q.<span class="built_in">push</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应操作5</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">act_5</span><span class="params">(magic_cube t)</span> </span>&#123;</span><br><span class="line">    magic_cube tmp;</span><br><span class="line">    tmp = t;</span><br><span class="line">    tmp.a[<span class="number">5</span>][<span class="number">2</span>] = t.a[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">5</span>][<span class="number">1</span>] = t.a[<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">3</span>][<span class="number">1</span>] = t.a[<span class="number">9</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">3</span>][<span class="number">2</span>] = t.a[<span class="number">9</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">9</span>][<span class="number">1</span>] = t.a[<span class="number">7</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">9</span>][<span class="number">2</span>] = t.a[<span class="number">7</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">7</span>][<span class="number">1</span>] = t.a[<span class="number">5</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">7</span>][<span class="number">2</span>] = t.a[<span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    tmp.a[<span class="number">1</span>][<span class="number">1</span>] = t.a[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">1</span>][<span class="number">2</span>] = t.a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">2</span>][<span class="number">2</span>] = t.a[<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">2</span>][<span class="number">1</span>] = t.a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    tmp.steps.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">is_back</span>(tmp)) &#123;</span><br><span class="line">    	flag = <span class="number">1</span>;</span><br><span class="line">        cout&lt;&lt;tmp.steps.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">while</span> (!tmp.steps.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        	cout&lt;&lt;tmp.steps.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">        	tmp.steps.<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    q.<span class="built_in">push</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应操作6</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">act_6</span><span class="params">(magic_cube t)</span> </span>&#123;</span><br><span class="line">    magic_cube tmp;</span><br><span class="line">    tmp = t;</span><br><span class="line">    tmp.a[<span class="number">6</span>][<span class="number">2</span>] = t.a[<span class="number">4</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">6</span>][<span class="number">1</span>] = t.a[<span class="number">4</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">4</span>][<span class="number">1</span>] = t.a[<span class="number">10</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">4</span>][<span class="number">2</span>] = t.a[<span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">10</span>][<span class="number">1</span>] = t.a[<span class="number">8</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">10</span>][<span class="number">2</span>] = t.a[<span class="number">8</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">8</span>][<span class="number">1</span>] = t.a[<span class="number">6</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">8</span>][<span class="number">2</span>] = t.a[<span class="number">6</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    tmp.a[<span class="number">11</span>][<span class="number">1</span>] = t.a[<span class="number">12</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">11</span>][<span class="number">2</span>] = t.a[<span class="number">11</span>][<span class="number">1</span>];</span><br><span class="line">    tmp.a[<span class="number">12</span>][<span class="number">2</span>] = t.a[<span class="number">11</span>][<span class="number">2</span>];</span><br><span class="line">    tmp.a[<span class="number">12</span>][<span class="number">1</span>] = t.a[<span class="number">12</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    tmp.steps.<span class="built_in">push</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">is_back</span>(tmp)) &#123;</span><br><span class="line">    	flag = <span class="number">1</span>;</span><br><span class="line">        cout&lt;&lt;tmp.steps.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">while</span> (!tmp.steps.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        	cout&lt;&lt;tmp.steps.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">        	tmp.steps.<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    q.<span class="built_in">push</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历每一种操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(magic_cube t, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(num) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">act_1</span>(t); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">act_2</span>(t); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">act_3</span>(t); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">act_4</span>(t); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: <span class="built_in">act_5</span>(t); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: <span class="built_in">act_6</span>(t); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心递归算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_best</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(flag) <span class="keyword">return</span>; <span class="comment">// 如果找到，就退出递归</span></span><br><span class="line">    <span class="built_in">search</span>(q.<span class="built_in">front</span>(), <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">search</span>(q.<span class="built_in">front</span>(), <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">search</span>(q.<span class="built_in">front</span>(), <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">search</span>(q.<span class="built_in">front</span>(), <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">search</span>(q.<span class="built_in">front</span>(), <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">search</span>(q.<span class="built_in">front</span>(), <span class="number">6</span>);</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">find_best</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数入口</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">input_cube</span>();</span><br><span class="line">    q.<span class="built_in">push</span>(init);</span><br><span class="line">    <span class="built_in">find_best</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>测试样例：</p>
<blockquote>
<p>5 1 5 1 2 2 2 2 1 3 1 3 4 4 4 4 5 6 5 6 3 6 3 6</p>
</blockquote>
<p>显然，只需要拧一下就可以复原<br>输出：</p>
<blockquote>
<p>input cube:<br>1<br>steps:<br>2</p>
</blockquote>
<p>第一行代表总的操作次数，第二行代表从第一次操作开始的所有操作编号</p>
]]></content>
      <categories>
        <category>智能算法</category>
      </categories>
      <tags>
        <tag>MatLab</tag>
        <tag>BFS</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>无人艇集群编队控制</title>
    <url>/%E6%97%A0%E4%BA%BA%E8%89%87%E9%9B%86%E7%BE%A4%E7%BC%96%E9%98%9F%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>无人艇编队控制项目是国家自然基金委重大项目的一个子课题，大课题由上海大学牵头，在我入学之前，已经完成了理论部分的研究，我在项目中负责结题演示实验的设计和实施。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="无人艇集群.jpg" alt="队长会无人系统分享" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    无人艇集群：“小黄鸭群”
  </p>
</div>

<h2 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h2><p>演示总体分为四个部分，分别控制20艘无人艇展示：</p>
<ol>
<li>无人艇从初始状态切换编队</li>
<li>无人艇在编队状态下前进，根据当前数量自主调整编队</li>
<li>在遭遇未知舰艇时，排除侦察艇前出侦察</li>
<li>若侦察艇发现中立舰艇，则增派一艘舰艇持续跟踪驱离</li>
<li>若侦察艇发现敌方舰艇，则增派两艘舰艇进行围捕（形成三艇围捕队形10秒视为围捕成功）</li>
</ol>
<h2 id="具体工作"><a href="#具体工作" class="headerlink" title="具体工作"></a>具体工作</h2><p>这个项目分为两个时间节点，一个是2023年年底的结题报告，一个是2024年4月的专家验收。</p>
<p>和之前参与过的项目不同，无人艇搭载的通讯设备是电台，采用UDP传输信息，不能使用ROS的消息传递机制，因此需要自己设计通信协议。这部分虽然很简单，但在实际的实验中由于发送速度过快或过慢，都遇到了不少问题。</p>
<p>算法的设计很简单，根据无人艇的数量，预设一个内外两个圈的队形，核心是要护航的一艘有人驾驶的船作为母艇。在有外来船只被感知时，根据不同的目标类型，重新设置编队位置，并使用匈牙利算法在最小化每艘船的位置变化条件下，分配无人艇到新的位置。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="遥控器视角.jpg" alt="队长会无人系统分享" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    无人艇遥控器视角
  </p>
</div>

<p>由于无人艇行驶在海面中，航程范围极大，因此传统的ego-planner等以栅格地图为基础的路径规划方法运算量极大，无法做到实时规划。因此，我们改进了人工势场法，避开歧义值，并在扇形区域内有船只时动态调整航向和速度，保证稳定安全的路径规划。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <img src="专家演示演练.jpg" alt="队长会无人系统分享" loading="lazy" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    结题演示演练
  </p>
</div>

<p>与无人机中使用的px4ctrl类似，控制算法采用了PD控制器，由于无人艇在海面上会收到风浪的影响，因此控制算法输入的目标也是一个围绕目标点的动态点，保证无人艇在风浪影响下仍能稳定前进并保持队形。</p>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <video width="800" height="450" controls style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
    <source src="编队.mp4" type="video/mp4">
    您的浏览器不支持视频标签。
  </video>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    编队队形
  </p>
</div>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <video width="800" height="450" controls style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
    <source src="驱离.mp4" type="video/mp4">
    您的浏览器不支持视频标签。
  </video>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    驱离队形
  </p>
</div>
<div style="display: flex; flex-direction: column; align-items: center; margin: 20px 0;">
  <video width="800" height="450" controls style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
    <source src="围捕.mp4" type="video/mp4">
    您的浏览器不支持视频标签。
  </video>
  <p style="margin-top: 8px; margin-bottom: 0; font-size: 14px; color: #666; font-style: italic; text-align: center;">
    围捕队形
  </p>
</div>]]></content>
      <categories>
        <category>科创项目</category>
      </categories>
      <tags>
        <tag>课题组纵向项目</tag>
      </tags>
  </entry>
</search>
